{"version":3,"file":"static/js/496.4bdd78ac.chunk.js","mappings":"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","sources":["components/FilterBar/index.tsx","components/EditCellModal/index.tsx","components/SmartTable/index.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Chip,\r\n  Button,\r\n  Typography,\r\n  Popover,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Avatar,\r\n  Checkbox,\r\n  TextField,\r\n  InputAdornment,\r\n  Divider,\r\n  MenuItem,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  Stack,\r\n  IconButton,\r\n  Skeleton,\r\n  useTheme,\r\n  alpha\r\n} from '@mui/material';\r\nimport {\r\n  Search as SearchIcon,\r\n  KeyboardArrowDown as ArrowDownIcon,\r\n  Close as CloseIcon,\r\n  Person as PersonIcon,\r\n  CalendarToday as CalendarIcon,\r\n  Timeline as ActivityIcon,\r\n  Label as StatusIcon,\r\n  AttachMoney as MoneyIcon,\r\n  Clear as ClearIcon\r\n} from '@mui/icons-material';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n// Types\r\nexport interface FilterConfig {\r\n  id: string;\r\n  label: string;\r\n  type: 'owner' | 'date' | 'status' | 'amount';\r\n  icon: React.ReactNode;\r\n  enabled: boolean;\r\n  fieldName?: string; // The actual field name in the data\r\n}\r\n\r\nexport interface SavedView {\r\n  id: string;\r\n  label: string;\r\n  count?: number;\r\n}\r\n\r\nexport interface FilterOwner {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport interface FilterStatus {\r\n  value: string;\r\n  label: string;\r\n  color: string;\r\n}\r\n\r\nexport interface FilterQuery {\r\n  ownerIds: string[];\r\n  leadStatus: string[];\r\n  createdAt?: {\r\n    preset?: string;\r\n    start?: string;\r\n    end?: string;\r\n  };\r\n  lastActivityAt?: {\r\n    preset?: string;\r\n    start?: string;\r\n    end?: string;\r\n  };\r\n  amount?: {\r\n    min?: number;\r\n    max?: number;\r\n    currency: string;\r\n  };\r\n}\r\n\r\nexport interface FilterBarProps {\r\n  entity: 'contacts' | 'deals';\r\n  availableFilters: FilterConfig[];\r\n  owners: FilterOwner[];\r\n  statuses: FilterStatus[];\r\n  savedViews: SavedView[];\r\n  currency?: string;\r\n  onQueryChange: (query: FilterQuery) => void;\r\n  onViewChange: (viewId: string) => void;\r\n  sticky?: boolean;\r\n}\r\n\r\nconst FilterBar: React.FC<FilterBarProps> = ({\r\n  entity,\r\n  availableFilters,\r\n  owners,\r\n  statuses,\r\n  savedViews,\r\n  currency = '₫',\r\n  onQueryChange,\r\n  onViewChange,\r\n  sticky = true\r\n}) => {\r\n  const theme = useTheme();\r\n  const { t } = useTranslation();\r\n  const [activeView, setActiveView] = useState('all');\r\n  const [appliedFilters, setAppliedFilters] = useState<FilterQuery>({\r\n    ownerIds: [],\r\n    leadStatus: [],\r\n  });\r\n  const [openPopover, setOpenPopover] = useState<string | null>(null);\r\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\r\n  const [searchQueries, setSearchQueries] = useState<{ [key: string]: string }>({});\r\n  const [tempFilters, setTempFilters] = useState<any>({});\r\n\r\n  // Date presets\r\n  const datePresets = [\r\n    { value: 'today', label: t('components.filterBar.datePresets.today') },\r\n    { value: 'yesterday', label: t('components.filterBar.datePresets.yesterday') },\r\n    { value: 'last7days', label: t('components.filterBar.datePresets.last7days') },\r\n    { value: 'last30days', label: t('components.filterBar.datePresets.last30days') },\r\n    { value: 'thismonth', label: t('components.filterBar.datePresets.thismonth') },\r\n    { value: 'lastmonth', label: t('components.filterBar.datePresets.lastmonth') },\r\n    { value: 'custom', label: t('components.filterBar.datePresets.custom') }\r\n  ];\r\n\r\n  // Handle filter chip click\r\n  const handleFilterClick = (filterId: string, event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setOpenPopover(filterId);\r\n    setSearchQueries(prev => ({ ...prev, [filterId]: '' }));\r\n  };\r\n\r\n  // Handle popover close\r\n  const handlePopoverClose = () => {\r\n    setOpenPopover(null);\r\n    setAnchorEl(null);\r\n    setTempFilters({});\r\n  };\r\n\r\n  // Handle owner selection\r\n  const handleOwnerSelect = (ownerId: string) => {\r\n    const newOwnerIds = appliedFilters.ownerIds.includes(ownerId)\r\n      ? appliedFilters.ownerIds.filter(id => id !== ownerId)\r\n      : [...appliedFilters.ownerIds, ownerId];\r\n    \r\n    const newQuery = { ...appliedFilters, ownerIds: newOwnerIds };\r\n    setAppliedFilters(newQuery);\r\n    onQueryChange(newQuery);\r\n  };\r\n\r\n  // Handle status selection\r\n  const handleStatusSelect = (status: string) => {\r\n    const newStatuses = appliedFilters.leadStatus.includes(status)\r\n      ? appliedFilters.leadStatus.filter(s => s !== status)\r\n      : [...appliedFilters.leadStatus, status];\r\n    \r\n    const newQuery = { ...appliedFilters, leadStatus: newStatuses };\r\n    setAppliedFilters(newQuery);\r\n    onQueryChange(newQuery);\r\n  };\r\n\r\n  // Handle date preset selection\r\n  const handleDatePreset = (filterId: string, preset: string) => {\r\n    const filter = availableFilters.find(f => f.id === filterId);\r\n    const fieldName = filter?.fieldName || filterId;\r\n    \r\n    const newQuery = {\r\n      ...appliedFilters,\r\n      [fieldName]: { preset }\r\n    };\r\n    setAppliedFilters(newQuery);\r\n    onQueryChange(newQuery);\r\n    handlePopoverClose();\r\n  };\r\n\r\n  // Handle amount filter\r\n  const handleAmountApply = () => {\r\n    const { min, max } = tempFilters;\r\n    if (min !== undefined || max !== undefined) {\r\n      const newQuery = {\r\n        ...appliedFilters,\r\n        amount: { min, max, currency }\r\n      };\r\n      setAppliedFilters(newQuery);\r\n      onQueryChange(newQuery);\r\n    }\r\n    handlePopoverClose();\r\n  };\r\n\r\n  // Handle view change\r\n  const handleViewChange = (viewId: string) => {\r\n    setActiveView(viewId);\r\n    onViewChange(viewId);\r\n  };\r\n\r\n  // Clear all filters\r\n  const handleClearAll = () => {\r\n    const emptyQuery: FilterQuery = {\r\n      ownerIds: [],\r\n      leadStatus: [],\r\n    };\r\n    setAppliedFilters(emptyQuery);\r\n    onQueryChange(emptyQuery);\r\n  };\r\n\r\n  // Remove specific filter token\r\n  const handleRemoveToken = (tokenType: string, value?: string) => {\r\n    let newQuery = { ...appliedFilters };\r\n    \r\n    if (tokenType === 'owner') {\r\n      if (value) {\r\n        newQuery.ownerIds = newQuery.ownerIds.filter(id => id !== value);\r\n      }\r\n    } else if (tokenType === 'status') {\r\n      if (value) {\r\n        newQuery.leadStatus = newQuery.leadStatus.filter(s => s !== value);\r\n      }\r\n    } else if (tokenType === 'amount') {\r\n      delete newQuery.amount;\r\n    } else {\r\n      // Handle date fields dynamically\r\n      delete (newQuery as any)[tokenType];\r\n    }\r\n    \r\n    setAppliedFilters(newQuery);\r\n    onQueryChange(newQuery);\r\n  };\r\n\r\n  // Filter owners based on search\r\n  const filteredOwners = owners.filter(owner =>\r\n    owner.name.toLowerCase().includes((searchQueries.owner || '').toLowerCase()) ||\r\n    owner.email.toLowerCase().includes((searchQueries.owner || '').toLowerCase())\r\n  );\r\n\r\n  // Get applied filter tokens\r\n  const getAppliedTokens = () => {\r\n    const tokens: Array<{\r\n      type: string;\r\n      value?: string;\r\n      label: string;\r\n      avatar?: string;\r\n      color?: string;\r\n    }> = [];\r\n\r\n    // Owner tokens\r\n    appliedFilters.ownerIds.forEach(ownerId => {\r\n      const owner = owners.find(o => o.id === ownerId);\r\n      if (owner) {\r\n        tokens.push({\r\n          type: 'owner',\r\n          value: ownerId,\r\n          label: owner.name,\r\n          avatar: owner.avatar\r\n        });\r\n      }\r\n    });\r\n\r\n    // Status tokens\r\n    appliedFilters.leadStatus.forEach(status => {\r\n      const statusConfig = statuses.find(s => s.value === status);\r\n      if (statusConfig) {\r\n        tokens.push({\r\n          type: 'status',\r\n          value: status,\r\n          label: statusConfig.label,\r\n          color: statusConfig.color\r\n        });\r\n      }\r\n    });\r\n\r\n    // Date tokens - dynamically check for any date fields\r\n    availableFilters.forEach(filter => {\r\n      if (filter.type === 'date') {\r\n        const fieldName = filter.fieldName || filter.id;\r\n        const dateFilter = (appliedFilters as any)[fieldName];\r\n        if (dateFilter) {\r\n          tokens.push({\r\n            type: fieldName,\r\n            label: `${filter.label}: ${dateFilter.preset || 'Custom range'}`\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Amount token\r\n    if (appliedFilters.amount) {\r\n      const { min, max } = appliedFilters.amount;\r\n      let label = 'Amount: ';\r\n      if (min && max) {\r\n        label += `${min}${currency} - ${max}${currency}`;\r\n      } else if (min) {\r\n        label += `≥ ${min}${currency}`;\r\n      } else if (max) {\r\n        label += `≤ ${max}${currency}`;\r\n      }\r\n      tokens.push({\r\n        type: 'amount',\r\n        label\r\n      });\r\n    }\r\n\r\n    return tokens;\r\n  };\r\n\r\n  const appliedTokens = getAppliedTokens();\r\n  const hasActiveFilters = appliedTokens.length > 0;\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        position: sticky ? 'sticky' : 'relative',\r\n        top: sticky ? 0 : 'auto',\r\n        zIndex: 10,\r\n        backgroundColor: theme.palette.background.paper,\r\n        borderBottom: `1px solid ${theme.palette.divider}`,\r\n        py: 2,\r\n        px: 1,\r\n        mb: 2\r\n      }}\r\n    >\r\n      {/* Saved Views */}\r\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mr: 1 }}>\r\n          {t('components.filterBar.labels.view')}\r\n        </Typography>\r\n        {savedViews.map(view => (\r\n          <Chip\r\n            key={view.id}\r\n            label={`${view.label}${view.count ? ` (${view.count})` : ''}`}\r\n            variant={activeView === view.id ? 'filled' : 'outlined'}\r\n            color={activeView === view.id ? 'primary' : 'default'}\r\n            size=\"small\"\r\n            onClick={() => handleViewChange(view.id)}\r\n            sx={{\r\n              cursor: 'pointer',\r\n              '&:hover': {\r\n                backgroundColor: activeView === view.id \r\n                  ? alpha(theme.palette.primary.main, 0.8)\r\n                  : alpha(theme.palette.primary.main, 0.1)\r\n              }\r\n            }}\r\n          />\r\n        ))}\r\n      </Box>\r\n\r\n      {/* Filter Chips */}\r\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: hasActiveFilters ? 2 : 0 }}>\r\n        {availableFilters.filter(f => f.enabled).map(filter => {\r\n          const fieldName = filter.fieldName || filter.id;\r\n          const isActive = (filter.type === 'owner' && appliedFilters.ownerIds.length > 0) ||\r\n                          (filter.type === 'status' && appliedFilters.leadStatus.length > 0) ||\r\n                          (filter.type === 'date' && (appliedFilters as any)[fieldName]) ||\r\n                          (filter.type === 'amount' && appliedFilters.amount);\r\n\r\n          return (\r\n            <Chip\r\n              key={filter.id}\r\n              icon={filter.icon as React.ReactElement}\r\n              label={filter.label}\r\n              variant={isActive ? 'filled' : 'outlined'}\r\n              color={isActive ? 'primary' : 'default'}\r\n              size=\"small\"\r\n              onClick={(e: React.MouseEvent<HTMLElement>) => handleFilterClick(filter.id, e)}\r\n              deleteIcon={<ArrowDownIcon />}\r\n              onDelete={(e: any) => handleFilterClick(filter.id, e)}\r\n              sx={{\r\n                cursor: 'pointer',\r\n                '& .MuiChip-deleteIcon': {\r\n                  fontSize: '16px',\r\n                  ml: 0.5\r\n                },\r\n                '&:hover': {\r\n                  backgroundColor: isActive \r\n                    ? alpha(theme.palette.primary.main, 0.8)\r\n                    : alpha(theme.palette.primary.main, 0.1)\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n\r\n        {hasActiveFilters && (\r\n          <Button\r\n            size=\"small\"\r\n            startIcon={<ClearIcon />}\r\n            onClick={handleClearAll}\r\n            sx={{ ml: 1 }}\r\n          >\r\n            {t('components.filterBar.buttons.clearAll')}\r\n          </Button>\r\n        )}\r\n      </Box>\r\n\r\n      {/* Applied Filter Tokens */}\r\n      {hasActiveFilters && (\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flexWrap: 'wrap' }}>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mr: 1 }}>\r\n            {t('components.filterBar.labels.applied')}\r\n          </Typography>\r\n          {appliedTokens.map((token, index) => (\r\n            <Chip\r\n              key={`${token.type}-${token.value || index}`}\r\n              {...(token.avatar ? { avatar: <Avatar src={token.avatar} sx={{ width: 20, height: 20 }} /> } : {})}\r\n              label={token.label}\r\n              size=\"small\"\r\n              onDelete={() => handleRemoveToken(token.type, token.value)}\r\n              sx={{\r\n                backgroundColor: token.color ? alpha(token.color, 0.1) : alpha(theme.palette.primary.main, 0.1),\r\n                color: token.color || theme.palette.primary.main,\r\n                border: token.color ? `1px solid ${alpha(token.color, 0.3)}` : `1px solid ${alpha(theme.palette.primary.main, 0.3)}`,\r\n                '& .MuiChip-deleteIcon': {\r\n                  color: token.color || theme.palette.primary.main,\r\n                  '&:hover': {\r\n                    color: theme.palette.error.main\r\n                  }\r\n                }\r\n              }}\r\n            />\r\n          ))}\r\n        </Box>\r\n      )}\r\n\r\n      {/* Owner Filter Popover */}\r\n      <Popover\r\n        open={openPopover === 'owner'}\r\n        anchorEl={anchorEl}\r\n        onClose={handlePopoverClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left',\r\n        }}\r\n        PaperProps={{\r\n          sx: {\r\n            width: 350,\r\n            maxHeight: 400,\r\n            borderRadius: 2,\r\n            boxShadow: '0 8px 32px rgba(0,0,0,0.12)'\r\n          }\r\n        }}\r\n      >\r\n        <Box sx={{ p: 2 }}>\r\n          {/* Search */}\r\n          <TextField\r\n            fullWidth\r\n            size=\"small\"\r\n            placeholder={t('components.filterBar.placeholders.searchOwners')}\r\n            value={searchQueries.owner || ''}\r\n            onChange={(e) => setSearchQueries((prev: { [key: string]: string }) => ({ ...prev, owner: e.target.value }))}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon fontSize=\"small\" />\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n            sx={{ mb: 2 }}\r\n          />\r\n\r\n          {/* Quick options */}\r\n          <Box sx={{ mb: 2 }}>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n              {t('components.filterBar.labels.quickSelect')}\r\n            </Typography>\r\n            <Stack direction=\"row\" spacing={1}>\r\n              <Chip\r\n                label={t('components.filterBar.chips.me')}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                onClick={() => handleOwnerSelect('current-user')}\r\n                sx={{ cursor: 'pointer' }}\r\n              />\r\n              <Chip\r\n                label={t('components.filterBar.chips.unassigned')}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                onClick={() => handleOwnerSelect('unassigned')}\r\n                sx={{ cursor: 'pointer' }}\r\n              />\r\n            </Stack>\r\n          </Box>\r\n\r\n          <Divider sx={{ mb: 1 }} />\r\n\r\n          {/* Owner list */}\r\n          <List sx={{ maxHeight: 200, overflow: 'auto' }}>\r\n            {filteredOwners.length === 0 ? (\r\n              <ListItem>\r\n                <ListItemText\r\n                  primary={t('components.filterBar.messages.noResults')}\r\n                  primaryTypographyProps={{ color: 'text.secondary', variant: 'body2' }}\r\n                />\r\n              </ListItem>\r\n            ) : (\r\n              filteredOwners.map(owner => (\r\n                <ListItem\r\n                  key={owner.id}\r\n                  dense\r\n                  sx={{ cursor: 'pointer', borderRadius: 1 }}\r\n                  onClick={() => handleOwnerSelect(owner.id)}\r\n                >\r\n                  <Checkbox\r\n                    checked={appliedFilters.ownerIds.includes(owner.id)}\r\n                    size=\"small\"\r\n                    sx={{ mr: 1 }}\r\n                  />\r\n                  <ListItemAvatar>\r\n                    <Avatar src={owner.avatar} sx={{ width: 32, height: 32 }}>\r\n                      {owner.name.charAt(0)}\r\n                    </Avatar>\r\n                  </ListItemAvatar>\r\n                  <ListItemText\r\n                    primary={owner.name}\r\n                    secondary={owner.email}\r\n                    primaryTypographyProps={{ fontWeight: 'medium', fontSize: '0.875rem' }}\r\n                    secondaryTypographyProps={{ fontSize: '0.75rem' }}\r\n                  />\r\n                </ListItem>\r\n              ))\r\n            )}\r\n          </List>\r\n        </Box>\r\n      </Popover>\r\n\r\n      {/* Date Filter Popover */}\r\n      <Popover\r\n        open={availableFilters.some(f => f.type === 'date' && openPopover === f.id)}\r\n        anchorEl={anchorEl}\r\n        onClose={handlePopoverClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left',\r\n        }}\r\n        PaperProps={{\r\n          sx: {\r\n            width: 280,\r\n            borderRadius: 2,\r\n            boxShadow: '0 8px 32px rgba(0,0,0,0.12)'\r\n          }\r\n        }}\r\n      >\r\n        <Box sx={{ p: 2 }}>\r\n          <Typography variant=\"subtitle2\" sx={{ mb: 2 }}>\r\n            {availableFilters.find(f => f.id === openPopover)?.label || t('components.filterBar.labels.dateFilter')}\r\n          </Typography>\r\n          \r\n          <List>\r\n            {datePresets.map(preset => (\r\n              <ListItem\r\n                key={preset.value}\r\n                dense\r\n                sx={{ cursor: 'pointer', borderRadius: 1 }}\r\n                onClick={() => handleDatePreset(openPopover!, preset.value)}\r\n              >\r\n                <ListItemText primary={preset.label} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Box>\r\n      </Popover>\r\n\r\n      {/* Status Filter Popover */}\r\n      <Popover\r\n        open={availableFilters.some(f => f.type === 'status' && openPopover === f.id)}\r\n        anchorEl={anchorEl}\r\n        onClose={handlePopoverClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left',\r\n        }}\r\n        PaperProps={{\r\n          sx: {\r\n            width: 300,\r\n            borderRadius: 2,\r\n            boxShadow: '0 8px 32px rgba(0,0,0,0.12)'\r\n          }\r\n        }}\r\n      >\r\n        <Box sx={{ p: 2 }}>\r\n          <Typography variant=\"subtitle2\" sx={{ mb: 2 }}>\r\n            {availableFilters.find(f => f.id === openPopover)?.label || t('components.filterBar.labels.statusFilter')}\r\n          </Typography>\r\n          \r\n          <List>\r\n            {statuses.map(status => (\r\n              <ListItem\r\n                key={status.value}\r\n                dense\r\n                sx={{ cursor: 'pointer', borderRadius: 1 }}\r\n                onClick={() => handleStatusSelect(status.value)}\r\n              >\r\n                <Checkbox\r\n                  checked={appliedFilters.leadStatus.includes(status.value)}\r\n                  size=\"small\"\r\n                  sx={{ mr: 1 }}\r\n                />\r\n                <Chip\r\n                  label={status.label}\r\n                  size=\"small\"\r\n                  sx={{\r\n                    backgroundColor: alpha(status.color, 0.1),\r\n                    color: status.color,\r\n                    border: `1px solid ${alpha(status.color, 0.3)}`\r\n                  }}\r\n                />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Box>\r\n      </Popover>\r\n\r\n      {/* Amount Filter Popover */}\r\n      <Popover\r\n        open={openPopover === 'amount'}\r\n        anchorEl={anchorEl}\r\n        onClose={handlePopoverClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left',\r\n        }}\r\n        PaperProps={{\r\n          sx: {\r\n            width: 320,\r\n            borderRadius: 2,\r\n            boxShadow: '0 8px 32px rgba(0,0,0,0.12)'\r\n          }\r\n        }}\r\n      >\r\n        <Box sx={{ p: 2 }}>\r\n          <Typography variant=\"subtitle2\" sx={{ mb: 2 }}>\r\n            {t('components.filterBar.labels.amountRange')}\r\n          </Typography>\r\n          \r\n          <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\r\n            <TextField\r\n              label={t('components.filterBar.range.min')}\r\n              type=\"number\"\r\n              size=\"small\"\r\n              value={tempFilters.min || ''}\r\n              onChange={(e) => setTempFilters((prev: any) => ({ ...prev, min: e.target.value ? Number(e.target.value) : undefined }))}\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position=\"end\">{currency}</InputAdornment>\r\n              }}\r\n            />\r\n            <TextField\r\n              label={t('components.filterBar.range.max')}\r\n              type=\"number\"\r\n              size=\"small\"\r\n              value={tempFilters.max || ''}\r\n              onChange={(e) => setTempFilters((prev: any) => ({ ...prev, max: e.target.value ? Number(e.target.value) : undefined }))}\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position=\"end\">{currency}</InputAdornment>\r\n              }}\r\n            />\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>\r\n            <Button size=\"small\" onClick={handlePopoverClose}>\r\n              {t('components.filterBar.buttons.cancel')}\r\n            </Button>\r\n            <Button \r\n              size=\"small\" \r\n              variant=\"contained\" \r\n              onClick={handleAmountApply}\r\n              disabled={!tempFilters.min && !tempFilters.max}\r\n            >\r\n              {t('components.filterBar.buttons.apply')}\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Popover>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FilterBar;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Box,\r\n  Typography,\r\n  Avatar,\r\n  List,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  InputAdornment,\r\n  CircularProgress,\r\n  Alert,\r\n  Chip,\r\n  useTheme,\r\n  alpha\r\n} from '@mui/material';\r\nimport {\r\n  Search as SearchIcon,\r\n  Person as PersonIcon,\r\n  Email as EmailIcon,\r\n  Phone as PhoneIcon,\r\n  Business as BusinessIcon,\r\n  Work as WorkIcon,\r\n  AttachMoney as MoneyIcon,\r\n  Event as EventIcon,\r\n  Label as LabelIcon\r\n} from '@mui/icons-material';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport interface SmartTableColumn {\r\n  id: string;\r\n  label: string;\r\n  type: 'text' | 'email' | 'phone' | 'number' | 'currency' | 'date' | 'select' | 'userSelect' | 'actions';\r\n  editable?: boolean;\r\n  sortable?: boolean;\r\n  width?: number;\r\n  minWidth?: number;\r\n  align?: 'left' | 'center' | 'right';\r\n  format?: (value: any) => string;\r\n  validate?: (value: any) => string | null;\r\n  required?: boolean;\r\n  options?: Array<{\r\n    value: any;\r\n    label: string;\r\n    color?: string;\r\n  }>;\r\n}\r\n\r\nexport interface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport interface EditCellModalProps {\r\n  open: boolean;\r\n  column: SmartTableColumn;\r\n  value: any;\r\n  rowData: any;\r\n  users?: User[];\r\n  onSave: (value: any) => Promise<boolean>;\r\n  onClose: () => void;\r\n}\r\n\r\nconst EditCellModal: React.FC<EditCellModalProps> = ({\r\n  open,\r\n  column,\r\n  value: initialValue,\r\n  rowData,\r\n  users = [],\r\n  onSave,\r\n  onClose\r\n}) => {\r\n  const theme = useTheme();\r\n  const { t } = useTranslation();\r\n  const [value, setValue] = useState(initialValue);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [saving, setSaving] = useState(false);\r\n  const [userSearchQuery, setUserSearchQuery] = useState('');\r\n\r\n  // Reset value when modal opens\r\n  useEffect(() => {\r\n    if (open) {\r\n      setValue(initialValue);\r\n      setError(null);\r\n      setUserSearchQuery('');\r\n    }\r\n  }, [open, initialValue]);\r\n\r\n  // Validate value\r\n  const validateValue = (val: any): string | null => {\r\n    if (column.required && (!val || val.toString().trim() === '')) {\r\n      return t('common.validation.requiredField', { field: column.label, defaultValue: `${column.label} is required` });\r\n    }\r\n    \r\n    if (column.validate) {\r\n      return column.validate(val);\r\n    }\r\n    \r\n    return null;\r\n  };\r\n\r\n  // Handle save\r\n  const handleSave = async () => {\r\n    const validationError = validateValue(value);\r\n    if (validationError) {\r\n      setError(validationError);\r\n      return;\r\n    }\r\n\r\n    setSaving(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const success = await onSave(value);\r\n      if (success) {\r\n        onClose();\r\n      } else {\r\n        setError(t('components.editCellModal.errors.saveFailed', { defaultValue: 'Could not save changes. Please try again.' }));\r\n      }\r\n    } catch (err) {\r\n      setError(t('components.editCellModal.errors.saveError', { defaultValue: 'An error occurred while saving.' }));\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  // Handle cancel\r\n  const handleCancel = () => {\r\n    setValue(initialValue);\r\n    setError(null);\r\n    onClose();\r\n  };\r\n\r\n  // Filter users for userSelect\r\n  const filteredUsers = users.filter(user =>\r\n    user.name.toLowerCase().includes(userSearchQuery.toLowerCase()) ||\r\n    user.email.toLowerCase().includes(userSearchQuery.toLowerCase())\r\n  );\r\n\r\n  // Get field icon\r\n  const getFieldIcon = () => {\r\n    switch (column.type) {\r\n      case 'email': return <EmailIcon fontSize=\"small\" />;\r\n      case 'phone': return <PhoneIcon fontSize=\"small\" />;\r\n      case 'currency': return <MoneyIcon fontSize=\"small\" />;\r\n      case 'date': return <EventIcon fontSize=\"small\" />;\r\n      case 'userSelect': return <PersonIcon fontSize=\"small\" />;\r\n      case 'select': return <LabelIcon fontSize=\"small\" />;\r\n      default: return <BusinessIcon fontSize=\"small\" />;\r\n    }\r\n  };\r\n\r\n  // Render input field based on column type\r\n  const renderInputField = () => {\r\n    switch (column.type) {\r\n      case 'select':\r\n        return (\r\n          <FormControl fullWidth variant=\"standard\">\r\n            <InputLabel>{column.label}</InputLabel>\r\n            <Select\r\n              value={value || ''}\r\n              onChange={(e) => setValue(e.target.value)}\r\n            >\r\n              {column.options?.map(option => (\r\n                <MenuItem key={option.value} value={option.value}>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                    {option.color && (\r\n                      <Box\r\n                        sx={{\r\n                          width: 12,\r\n                          height: 12,\r\n                          borderRadius: '50%',\r\n                          backgroundColor: option.color\r\n                        }}\r\n                      />\r\n                    )}\r\n                    {option.label}\r\n                  </Box>\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        );\r\n\r\n      case 'userSelect':\r\n        return (\r\n          <Box>\r\n            <TextField\r\n              fullWidth\r\n              label={t('components.editCellModal.searchUser', { defaultValue: 'Search user' })}\r\n              value={userSearchQuery}\r\n              onChange={(e) => setUserSearchQuery(e.target.value)}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon fontSize=\"small\" />\r\n                  </InputAdornment>\r\n                )\r\n              }}\r\n              sx={{ mb: 2 }}\r\n            />\r\n            \r\n            <Box sx={{ maxHeight: 200, overflow: 'auto' }}>\r\n              <List dense>\r\n                {filteredUsers.map(user => (\r\n                  <ListItem key={user.id} sx={{ p: 0, mb: 0.5 }}>\r\n                    <ListItemButton\r\n                      selected={value === user.id}\r\n                      onClick={() => setValue(user.id)}\r\n                      sx={{\r\n                        borderRadius: 1,\r\n                        '&.Mui-selected': {\r\n                          backgroundColor: alpha(theme.palette.primary.main, 0.1),\r\n                          '&:hover': {\r\n                            backgroundColor: alpha(theme.palette.primary.main, 0.2),\r\n                          }\r\n                        }\r\n                      }}\r\n                    >\r\n                    <ListItemAvatar>\r\n                      <Avatar sx={{ width: 32, height: 32 }} src={user.avatar}>\r\n                        {user.name.charAt(0)}\r\n                      </Avatar>\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                      primary={user.name}\r\n                      secondary={user.email}\r\n                      primaryTypographyProps={{ variant: 'body2' }}\r\n                      secondaryTypographyProps={{ variant: 'caption' }}\r\n                    />\r\n                    </ListItemButton>\r\n                  </ListItem>\r\n                ))}\r\n                \r\n                {filteredUsers.length === 0 && (\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ p: 2, textAlign: 'center' }}>\r\n                    {t('components.editCellModal.noUsersFound', { defaultValue: 'No users found' })}\r\n                  </Typography>\r\n                )}\r\n              </List>\r\n            </Box>\r\n          </Box>\r\n        );\r\n\r\n      case 'date':\r\n        return (\r\n          <TextField\r\n            fullWidth\r\n            type=\"date\"\r\n            label={column.label}\r\n            value={value || ''}\r\n            onChange={(e) => setValue(e.target.value)}\r\n            InputLabelProps={{ shrink: true }}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  {getFieldIcon()}\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n          />\r\n        );\r\n\r\n      case 'number':\r\n      case 'currency':\r\n        return (\r\n          <TextField\r\n            fullWidth\r\n            type=\"number\"\r\n            label={column.label}\r\n            value={value || ''}\r\n            onChange={(e) => setValue(e.target.value)}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  {getFieldIcon()}\r\n                </InputAdornment>\r\n              ),\r\n              endAdornment: column.type === 'currency' ? (\r\n                <InputAdornment position=\"end\">₫</InputAdornment>\r\n              ) : undefined\r\n            }}\r\n          />\r\n        );\r\n\r\n      case 'email':\r\n        return (\r\n          <TextField\r\n            fullWidth\r\n            type=\"email\"\r\n            label={column.label}\r\n            value={value || ''}\r\n            onChange={(e) => setValue(e.target.value)}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <EmailIcon fontSize=\"small\" />\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n          />\r\n        );\r\n\r\n      case 'phone':\r\n        return (\r\n          <TextField\r\n            fullWidth\r\n            type=\"tel\"\r\n            label={column.label}\r\n            value={value || ''}\r\n            onChange={(e) => setValue(e.target.value)}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <PhoneIcon fontSize=\"small\" />\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n          />\r\n        );\r\n\r\n      default:\r\n        return (\r\n          <TextField\r\n            fullWidth\r\n            label={column.label}\r\n            value={value || ''}\r\n            onChange={(e) => setValue(e.target.value)}\r\n            multiline={column.type === 'text' && column.id === 'description'}\r\n            rows={column.id === 'description' ? 3 : 1}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  {getFieldIcon()}\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n          />\r\n        );\r\n    }\r\n  };\r\n\r\n  // Get current display value for selected option/user\r\n  const getCurrentDisplayValue = () => {\r\n    if (column.type === 'select' && column.options) {\r\n      const option = column.options.find(opt => opt.value === value);\r\n      return option ? (\r\n        <Chip\r\n          label={option.label}\r\n          size=\"small\"\r\n          sx={{\r\n            backgroundColor: option.color ? alpha(option.color, 0.1) : undefined,\r\n            color: option.color,\r\n            border: option.color ? `1px solid ${alpha(option.color, 0.3)}` : undefined\r\n          }}\r\n        />\r\n      ) : null;\r\n    }\r\n    \r\n    if (column.type === 'userSelect' && users) {\r\n      const user = users.find(u => u.id === value);\r\n      return user ? (\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n          <Avatar sx={{ width: 24, height: 24 }} src={user.avatar}>\r\n            {user.name.charAt(0)}\r\n          </Avatar>\r\n          <Typography variant=\"body2\">{user.name}</Typography>\r\n        </Box>\r\n      ) : null;\r\n    }\r\n    \r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={onClose}\r\n      maxWidth=\"xs\"\r\n      fullWidth\r\n      PaperProps={{\r\n        sx: {\r\n          borderRadius: 2\r\n        }\r\n      }}\r\n    >\r\n      <DialogTitle sx={{ pb: 1, pt: 2 }}>\r\n        <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\r\n          {t('components.editCellModal.title', { name: rowData.name || rowData.id, defaultValue: `Edit for ${rowData.name || rowData.id}` })}\r\n        </Typography>\r\n      </DialogTitle>\r\n\r\n      <DialogContent sx={{ pt: 3, pb: 2, px: 3 }}>\r\n        {/* Input field */}\r\n        <Box sx={{ mt: 1 }}>\r\n          {renderInputField()}\r\n        </Box>\r\n\r\n        {/* Error message */}\r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mt: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {/* Help text for validation */}\r\n        {column.type === 'email' && (\r\n          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\r\n            {t('components.editCellModal.examples.email', { defaultValue: 'Example: example@company.com' })}\r\n          </Typography>\r\n        )}\r\n        \r\n        {column.type === 'phone' && (\r\n          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\r\n            {t('components.editCellModal.examples.phone', { defaultValue: 'Example: 0901234567 (10-11 digits)' })}\r\n          </Typography>\r\n        )}\r\n      </DialogContent>\r\n\r\n      <DialogActions sx={{ px: 2, pb: 2, pt: 1 }}>\r\n        <Button onClick={handleCancel} size=\"small\">\r\n          {t('common.cancel', { defaultValue: 'Cancel' })}\r\n        </Button>\r\n        <Button \r\n          onClick={handleSave}\r\n          variant=\"contained\"\r\n          size=\"small\"\r\n          disabled={saving}\r\n        >\r\n          {saving ? t('common.saving', { defaultValue: 'Saving...' }) : t('common.save', { defaultValue: 'Save' })}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default EditCellModal;\r\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  Checkbox,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  TextField,\r\n  Button,\r\n  Chip,\r\n  Avatar,\r\n  Typography,\r\n  Tooltip,\r\n  CircularProgress,\r\n  Alert,\r\n  Skeleton,\r\n  FormControl,\r\n  Select,\r\n  Popover,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  InputAdornment,\r\n  InputLabel,\r\n  Paper,\r\n  Divider,\r\n  Pagination,\r\n  useTheme,\r\n  alpha\r\n} from '@mui/material';\r\nimport EditCellModal from '../EditCellModal';\r\nimport { useTranslation } from 'react-i18next';\r\nimport {\r\n  Search as SearchIcon,\r\n  FilterList as FilterIcon,\r\n  Refresh as RefreshIcon,\r\n  MoreVert as MoreVertIcon,\r\n  ArrowUpward as ArrowUpwardIcon,\r\n  ArrowDownward as ArrowDownwardIcon,\r\n  PushPin as PushPinIcon,\r\n  VisibilityOff as VisibilityOffIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Save as SaveIcon,\r\n  Close as CloseIcon,\r\n  Visibility as PreviewIcon,\r\n  Check as CheckIcon,\r\n  Error as ErrorIcon\r\n} from '@mui/icons-material';\r\n\r\n// Types\r\nexport interface SmartTableColumn {\r\n  id: string;\r\n  label: string;\r\n  type: 'text' | 'email' | 'phone' | 'number' | 'currency' | 'date' | 'select' | 'userSelect' | 'actions';\r\n  width?: number;\r\n  minWidth?: number;\r\n  sortable?: boolean;\r\n  editable?: boolean;\r\n  required?: boolean;\r\n  options?: { value: string; label: string; color?: string }[]; // for select type\r\n  format?: (value: any) => string;\r\n  validate?: (value: any) => string | null;\r\n  frozen?: 'left' | 'right' | null;\r\n  hidden?: boolean;\r\n}\r\n\r\nexport interface SmartTableRow {\r\n  id: string;\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface SmartTableProps {\r\n  columns: SmartTableColumn[];\r\n  data: SmartTableRow[];\r\n  loading?: boolean;\r\n  error?: string;\r\n  searchable?: boolean;\r\n  filterable?: boolean;\r\n  selectable?: boolean;\r\n  pagination?: boolean;\r\n  rowsPerPageOptions?: number[];\r\n  defaultRowsPerPage?: number;\r\n  emptyMessage?: string;\r\n  onRowDoubleClick?: (row: SmartTableRow) => void;\r\n  onCellEdit?: (rowId: string, columnId: string, value: any) => Promise<boolean>;\r\n  onRowSelect?: (selectedRows: string[]) => void;\r\n  onBulkAction?: (action: string, selectedRows: string[]) => void;\r\n  onPreviewContact?: (contact: SmartTableRow) => void;\r\n  users?: { id: string; name: string; email: string; avatar?: string }[]; // for userSelect\r\n  zebra?: boolean;\r\n}\r\n\r\nconst SmartTable: React.FC<SmartTableProps> = ({\r\n  columns,\r\n  data,\r\n  loading = false,\r\n  error,\r\n  searchable = true,\r\n  filterable = true,\r\n  selectable = true,\r\n  pagination = true,\r\n  rowsPerPageOptions = [10, 20, 50],\r\n  defaultRowsPerPage = 10,\r\n  emptyMessage,\r\n  onRowDoubleClick,\r\n  onCellEdit,\r\n  onRowSelect,\r\n  onBulkAction,\r\n  onPreviewContact,\r\n  users = [],\r\n  zebra = true\r\n}) => {\r\n  const theme = useTheme();\r\n  const { t } = useTranslation();\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [sortConfig, setSortConfig] = useState<{ key: string; direction: 'asc' | 'desc' | null }>({ key: '', direction: null });\r\n  const [selectedRows, setSelectedRows] = useState<string[]>([]);\r\n  const [editModalOpen, setEditModalOpen] = useState(false);\r\n  const [editModalData, setEditModalData] = useState<{ rowId: string; columnId: string; value: any; rowData: SmartTableRow } | null>(null);\r\n  const [columnMenuAnchor, setColumnMenuAnchor] = useState<{ element: HTMLElement; columnId: string } | null>(null);\r\n  const [hoveredCell, setHoveredCell] = useState<{ rowId: string; columnId: string } | null>(null);\r\n  const [userSelectAnchor, setUserSelectAnchor] = useState<{ element: HTMLElement; rowId: string; columnId: string } | null>(null);\r\n  const [userSearchQuery, setUserSearchQuery] = useState('');\r\n  const [page, setPage] = useState(1);\r\n  const [rowsPerPage, setRowsPerPage] = useState(defaultRowsPerPage);\r\n  const [visibleColumns, setVisibleColumns] = useState<string[]>(columns.map(col => col.id));\r\n  const [frozenColumns, setFrozenColumns] = useState<{ [key: string]: 'left' | 'right' | null }>({});\r\n  \r\n  const editInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // Filter and sort data\r\n  const filteredAndSortedData = useMemo(() => {\r\n    let filtered = data;\r\n\r\n    // Search filter\r\n    if (searchQuery) {\r\n      filtered = filtered.filter(row =>\r\n        Object.values(row).some(value =>\r\n          String(value).toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n\r\n    // Sort\r\n    if (sortConfig.key && sortConfig.direction) {\r\n      filtered = [...filtered].sort((a, b) => {\r\n        const aValue = a[sortConfig.key];\r\n        const bValue = b[sortConfig.key];\r\n        \r\n        if (aValue < bValue) {\r\n          return sortConfig.direction === 'asc' ? -1 : 1;\r\n        }\r\n        if (aValue > bValue) {\r\n          return sortConfig.direction === 'asc' ? 1 : -1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n\r\n    return filtered;\r\n  }, [data, searchQuery, sortConfig]);\r\n\r\n  // Pagination\r\n  const paginatedData = useMemo(() => {\r\n    if (!pagination) return filteredAndSortedData;\r\n    const startIndex = (page - 1) * rowsPerPage;\r\n    return filteredAndSortedData.slice(startIndex, startIndex + rowsPerPage);\r\n  }, [filteredAndSortedData, page, rowsPerPage, pagination]);\r\n\r\n  const totalPages = Math.ceil(filteredAndSortedData.length / rowsPerPage);\r\n\r\n  // Handle sort\r\n  const handleSort = (columnId: string) => {\r\n    const column = columns.find(col => col.id === columnId);\r\n    if (!column?.sortable) return;\r\n\r\n    setSortConfig(prev => {\r\n      if (prev.key !== columnId) {\r\n        return { key: columnId, direction: 'asc' };\r\n      }\r\n      if (prev.direction === 'asc') {\r\n        return { key: columnId, direction: 'desc' };\r\n      }\r\n      if (prev.direction === 'desc') {\r\n        return { key: '', direction: null };\r\n      }\r\n      return { key: columnId, direction: 'asc' };\r\n    });\r\n  };\r\n\r\n  // Handle row selection\r\n  const handleRowSelect = (rowId: string) => {\r\n    const newSelected = selectedRows.includes(rowId)\r\n      ? selectedRows.filter(id => id !== rowId)\r\n      : [...selectedRows, rowId];\r\n    \r\n    setSelectedRows(newSelected);\r\n    onRowSelect?.(newSelected);\r\n  };\r\n\r\n  const handleSelectAll = () => {\r\n    const allRowIds = paginatedData.map(row => row.id);\r\n    const newSelected = selectedRows.length === allRowIds.length ? [] : allRowIds;\r\n    setSelectedRows(newSelected);\r\n    onRowSelect?.(newSelected);\r\n  };\r\n\r\n  // Handle cell click for editing\r\n  const handleCellClick = (row: SmartTableRow, column: SmartTableColumn) => {\r\n    if (!column.editable || column.type === 'actions') return;\r\n\r\n    setEditModalData({\r\n      rowId: row.id,\r\n      columnId: column.id,\r\n      value: row[column.id],\r\n      rowData: row\r\n    });\r\n    setEditModalOpen(true);\r\n  };\r\n\r\n  // Handle modal save\r\n  const handleModalSave = async (value: any): Promise<boolean> => {\r\n    if (!editModalData || !onCellEdit) return false;\r\n\r\n    try {\r\n      const success = await onCellEdit(editModalData.rowId, editModalData.columnId, value);\r\n      return success;\r\n    } catch (error) {\r\n      console.error('Save error:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Handle modal close\r\n  const handleModalClose = () => {\r\n    setEditModalOpen(false);\r\n    setEditModalData(null);\r\n  };\r\n\r\n  // Handle user selection\r\n  const handleUserSelect = (userId: string) => {\r\n    if (!userSelectAnchor || !onCellEdit) return;\r\n\r\n    const user = users.find(u => u.id === userId);\r\n    if (user) {\r\n      onCellEdit(userSelectAnchor.rowId, userSelectAnchor.columnId, userId);\r\n    }\r\n    \r\n    setUserSelectAnchor(null);\r\n    setUserSearchQuery('');\r\n  };\r\n\r\n  // Filter users for popover\r\n  const filteredUsers = useMemo(() => {\r\n    if (!userSearchQuery) return users;\r\n    return users.filter(user =>\r\n      user.name.toLowerCase().includes(userSearchQuery.toLowerCase()) ||\r\n      user.email.toLowerCase().includes(userSearchQuery.toLowerCase())\r\n    );\r\n  }, [users, userSearchQuery]);\r\n\r\n  // Handle column menu\r\n  const handleColumnMenu = (event: React.MouseEvent<HTMLElement>, columnId: string) => {\r\n    event.stopPropagation();\r\n    setColumnMenuAnchor({ element: event.currentTarget, columnId });\r\n  };\r\n\r\n  const handleColumnMenuAction = (action: string, columnId: string) => {\r\n    switch (action) {\r\n      case 'sort-asc':\r\n        setSortConfig({ key: columnId, direction: 'asc' });\r\n        break;\r\n      case 'sort-desc':\r\n        setSortConfig({ key: columnId, direction: 'desc' });\r\n        break;\r\n      case 'hide':\r\n        setVisibleColumns(prev => prev.filter(id => id !== columnId));\r\n        break;\r\n    }\r\n    setColumnMenuAnchor(null);\r\n  };\r\n\r\n  // Render cell content\r\n  const renderCellContent = (row: SmartTableRow, column: SmartTableColumn) => {\r\n    const value = row[column.id];\r\n    const isHovered = hoveredCell?.rowId === row.id && hoveredCell?.columnId === column.id;\r\n\r\n    // Special handling for Name column with preview button\r\n    if (column.id === 'name' && onPreviewContact) {\r\n      return (\r\n        <Box \r\n          sx={{ \r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            justifyContent: 'space-between',\r\n            width: '100%'\r\n          }}\r\n          onMouseEnter={() => setHoveredCell({ rowId: row.id, columnId: column.id })}\r\n          onMouseLeave={() => setHoveredCell(null)}\r\n        >\r\n          <Typography variant=\"body2\" sx={{ flex: 1, mr: 1 }}>\r\n            {value}\r\n          </Typography>\r\n          {isHovered && (\r\n            <Tooltip title={t('components.smartTable.tooltips.previewContact')}>\r\n              <IconButton\r\n                size=\"small\"\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  onPreviewContact(row);\r\n                }}\r\n                sx={{\r\n                  opacity: 0.7,\r\n                  '&:hover': {\r\n                    opacity: 1,\r\n                    backgroundColor: alpha(theme.palette.primary.main, 0.1)\r\n                  }\r\n                }}\r\n              >\r\n                <PreviewIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n        </Box>\r\n      );\r\n    }\r\n\r\n    switch (column.type) {\r\n      case 'select':\r\n        const option = column.options?.find(opt => opt.value === value);\r\n        return option ? (\r\n          <Chip\r\n            label={option.label}\r\n            size=\"small\"\r\n            sx={{\r\n              backgroundColor: option.color ? alpha(option.color, 0.1) : undefined,\r\n              color: option.color,\r\n              border: option.color ? `1px solid ${alpha(option.color, 0.3)}` : undefined\r\n            }}\r\n          />\r\n        ) : value;\r\n      \r\n      case 'userSelect':\r\n        const user = users.find(u => u.id === value);\r\n        return user ? (\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n            <Avatar sx={{ width: 24, height: 24 }} src={user.avatar}>\r\n              {user.name.charAt(0)}\r\n            </Avatar>\r\n            <Typography variant=\"body2\">{user.name}</Typography>\r\n          </Box>\r\n        ) : value;\r\n      \r\n      case 'currency':\r\n        return column.format ? column.format(value) : `${value}₫`;\r\n      \r\n      case 'actions':\r\n        return (\r\n          <Box sx={{ display: 'flex', gap: 0.5 }}>\r\n            <IconButton size=\"small\">\r\n              <EditIcon fontSize=\"small\" />\r\n            </IconButton>\r\n            <IconButton size=\"small\" color=\"error\">\r\n              <DeleteIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Box>\r\n        );\r\n      \r\n      default:\r\n        return column.format ? column.format(value) : value;\r\n    }\r\n  };\r\n\r\n  // Render edit input\r\n  const renderEditInput = (column: SmartTableColumn, value: any, onChange: (value: any) => void) => {\r\n    switch (column.type) {\r\n      case 'select':\r\n        return (\r\n          <FormControl size=\"small\" fullWidth>\r\n            <Select\r\n              value={value}\r\n              onChange={(e) => onChange(e.target.value)}\r\n              autoFocus\r\n            >\r\n              {column.options?.map(option => (\r\n                <MenuItem key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        );\r\n      \r\n      case 'date':\r\n        return (\r\n          <TextField\r\n            ref={editInputRef}\r\n            type=\"date\"\r\n            size=\"small\"\r\n            fullWidth\r\n            value={value}\r\n            onChange={(e) => onChange(e.target.value)}\r\n            onKeyPress={(e) => {\r\n              if (e.key === 'Enter') handleModalSave(value);\r\n              if (e.key === 'Escape') handleModalClose();\r\n            }}\r\n          />\r\n        );\r\n      \r\n      case 'number':\r\n      case 'currency':\r\n        return (\r\n          <TextField\r\n            ref={editInputRef}\r\n            type=\"number\"\r\n            size=\"small\"\r\n            fullWidth\r\n            value={value}\r\n            onChange={(e) => onChange(e.target.value)}\r\n            onKeyPress={(e) => {\r\n              if (e.key === 'Enter') handleModalSave(value);\r\n              if (e.key === 'Escape') handleModalClose();\r\n            }}\r\n          />\r\n        );\r\n      \r\n      default:\r\n        return (\r\n          <TextField\r\n            ref={editInputRef}\r\n            size=\"small\"\r\n            fullWidth\r\n            value={value}\r\n            onChange={(e) => onChange(e.target.value)}\r\n            onKeyPress={(e) => {\r\n              if (e.key === 'Enter') handleModalSave(value);\r\n              if (e.key === 'Escape') handleModalClose();\r\n            }}\r\n          />\r\n        );\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box>\r\n        {/* Toolbar skeleton */}\r\n        <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\r\n          <Skeleton variant=\"rectangular\" width={200} height={40} />\r\n          <Skeleton variant=\"rectangular\" width={100} height={40} />\r\n          <Skeleton variant=\"rectangular\" width={100} height={40} />\r\n        </Box>\r\n        \r\n        {/* Table skeleton */}\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                {columns.map(column => (\r\n                  <TableCell key={column.id}>\r\n                    <Skeleton variant=\"text\" />\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {Array.from({ length: 5 }).map((_, index) => (\r\n                <TableRow key={index}>\r\n                  {columns.map(column => (\r\n                    <TableCell key={column.id}>\r\n                      <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ \r\n      width: '100%', \r\n      height: '100%',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      overflow: 'hidden'\r\n    }}>\r\n      {/* Error Alert */}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Toolbar */}\r\n      <Box sx={{ \r\n        display: 'flex', \r\n        gap: 2, \r\n        mb: 2,\r\n        flexWrap: 'wrap',\r\n        alignItems: 'center',\r\n        flexShrink: 0,\r\n        px: 1\r\n      }}>\r\n        {searchable && (\r\n          <TextField\r\n            placeholder={t('components.smartTable.placeholders.search')}\r\n            size=\"small\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n            sx={{ minWidth: 200 }}\r\n          />\r\n        )}\r\n        \r\n        {filterable && (\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<FilterIcon />}\r\n            size=\"small\"\r\n          >\r\n            {t('components.smartTable.buttons.filters')}\r\n          </Button>\r\n        )}\r\n\r\n        <Box sx={{ \r\n          ml: 'auto', \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          gap: 2,\r\n          flexShrink: 0\r\n        }}>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {t('components.smartTable.labels.rows', { count: filteredAndSortedData.length })}\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Bulk Actions Bar */}\r\n      {selectedRows.length > 0 && (\r\n        <Box sx={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          gap: 2,\r\n          p: 2,\r\n          mb: 2,\r\n          backgroundColor: alpha(theme.palette.primary.main, 0.1),\r\n          borderRadius: 1\r\n        }}>\r\n          <Typography variant=\"body2\">\r\n            {t('components.smartTable.labels.selected', { count: selectedRows.length })}\r\n          </Typography>\r\n          <Button size=\"small\" onClick={() => onBulkAction?.('delete', selectedRows)}>\r\n            {t('components.smartTable.actions.delete')}\r\n          </Button>\r\n          <Button size=\"small\" onClick={() => onBulkAction?.('assign', selectedRows)}>\r\n            {t('components.smartTable.actions.assignOwner')}\r\n          </Button>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Table Container */}\r\n      <Box sx={{\r\n        flex: 1,\r\n        overflow: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n      }}>\r\n        <TableContainer \r\n          component={Paper} \r\n          sx={{ \r\n            flex: 1,\r\n            width: '100%',\r\n            overflow: 'auto',\r\n            '&::-webkit-scrollbar': {\r\n              height: '8px',\r\n              width: '8px',\r\n            },\r\n            '&::-webkit-scrollbar-track': {\r\n              backgroundColor: alpha(theme.palette.grey[300], 0.2),\r\n              borderRadius: '4px',\r\n            },\r\n            '&::-webkit-scrollbar-thumb': {\r\n              backgroundColor: alpha(theme.palette.primary.main, 0.4),\r\n              borderRadius: '4px',\r\n              border: '2px solid transparent',\r\n              backgroundClip: 'padding-box',\r\n              '&:hover': {\r\n                backgroundColor: alpha(theme.palette.primary.main, 0.6),\r\n              }\r\n            },\r\n            '&::-webkit-scrollbar-corner': {\r\n              backgroundColor: 'transparent',\r\n            }\r\n          }}\r\n        >\r\n        <Table \r\n          stickyHeader \r\n          sx={{ \r\n            minWidth: 1650, \r\n            width: '100%',\r\n            tableLayout: 'fixed'\r\n          }}\r\n        >\r\n          <TableHead>\r\n            <TableRow>\r\n              {selectable && (\r\n                <TableCell \r\n                  padding=\"checkbox\"\r\n                  sx={{\r\n                    minWidth: 50\r\n                  }}\r\n                >\r\n                  <Checkbox\r\n                    indeterminate={selectedRows.length > 0 && selectedRows.length < paginatedData.length}\r\n                    checked={paginatedData.length > 0 && selectedRows.length === paginatedData.length}\r\n                    onChange={handleSelectAll}\r\n                  />\r\n                </TableCell>\r\n              )}\r\n              \r\n              {columns\r\n                .filter(column => visibleColumns.includes(column.id))\r\n                .map(column => (\r\n                  <TableCell\r\n                    key={column.id}\r\n                    sx={{\r\n                      minWidth: column.width || column.minWidth || 150,\r\n                      cursor: column.sortable ? 'pointer' : 'default',\r\n                      userSelect: 'none',\r\n                      overflow: 'hidden',\r\n                      textOverflow: 'ellipsis',\r\n                      whiteSpace: 'nowrap'\r\n                    }}\r\n                    onClick={() => handleSort(column.id)}\r\n                  >\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                      <Typography variant=\"subtitle2\" fontWeight=\"bold\">\r\n                        {column.label}\r\n                      </Typography>\r\n                      \r\n                      {column.sortable && sortConfig.key === column.id && (\r\n                        sortConfig.direction === 'asc' ? (\r\n                          <ArrowUpwardIcon fontSize=\"small\" />\r\n                        ) : (\r\n                          <ArrowDownwardIcon fontSize=\"small\" />\r\n                        )\r\n                      )}\r\n                      \r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={(e) => handleColumnMenu(e, column.id)}\r\n                        sx={{ ml: 'auto' }}\r\n                      >\r\n                        <MoreVertIcon fontSize=\"small\" />\r\n                      </IconButton>\r\n                    </Box>\r\n                  </TableCell>\r\n                ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          \r\n          <TableBody>\r\n            {paginatedData.length === 0 ? (\r\n              <TableRow>\r\n                <TableCell \r\n                  colSpan={columns.length + (selectable ? 1 : 0)} \r\n                  sx={{ textAlign: 'center', py: 8 }}\r\n                >\r\n                  <Typography variant=\"body1\" color=\"text.secondary\">\r\n                    {emptyMessage || t('components.smartTable.empty')}\r\n                  </Typography>\r\n                </TableCell>\r\n              </TableRow>\r\n            ) : (\r\n              paginatedData.map((row, index) => (\r\n                <TableRow\r\n                  key={row.id}\r\n                  hover\r\n                  selected={selectedRows.includes(row.id)}\r\n                  onDoubleClick={() => onRowDoubleClick?.(row)}\r\n                  sx={{\r\n                    cursor: onRowDoubleClick ? 'pointer' : 'default',\r\n                    backgroundColor: zebra && index % 2 === 1 ? alpha(theme.palette.primary.main, 0.04) : 'transparent'\r\n                  }}\r\n                >\r\n                  {selectable && (\r\n                    <TableCell \r\n                      padding=\"checkbox\"\r\n                      sx={{\r\n                        minWidth: 50\r\n                      }}\r\n                    >\r\n                      <Checkbox\r\n                        checked={selectedRows.includes(row.id)}\r\n                        onChange={() => handleRowSelect(row.id)}\r\n                      />\r\n                    </TableCell>\r\n                  )}\r\n                  \r\n                  {columns\r\n                    .filter(column => visibleColumns.includes(column.id))\r\n                    .map(column => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        data-cell={`${row.id}-${column.id}`}\r\n                        onClick={() => handleCellClick(row, column)}\r\n                        sx={{\r\n                          minWidth: column.width || column.minWidth || 150,\r\n                          cursor: column.editable ? 'pointer' : 'default',\r\n                          overflow: 'hidden',\r\n                          textOverflow: 'ellipsis',\r\n                          whiteSpace: 'nowrap',\r\n                          '&:hover': column.editable ? {\r\n                            backgroundColor: alpha(theme.palette.primary.main, 0.04)\r\n                          } : {}\r\n                        }}\r\n                      >\r\n                        {renderCellContent(row, column)}\r\n                      </TableCell>\r\n                    ))}\r\n                </TableRow>\r\n              ))\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n        </TableContainer>\r\n      </Box>\r\n\r\n      {/* Pagination */}\r\n      {pagination && totalPages > 1 && (\r\n        <Box sx={{ \r\n          display: 'flex', \r\n          justifyContent: 'center', \r\n          alignItems: 'center',\r\n          mt: 2,\r\n          py: 2,\r\n          px: 1,\r\n          flexShrink: 0,\r\n          borderTop: `1px solid ${theme.palette.divider}`\r\n        }}>\r\n          <Pagination\r\n            count={totalPages}\r\n            page={page}\r\n            onChange={(_: React.ChangeEvent<unknown>, newPage: number) => setPage(newPage)}\r\n            color=\"primary\"\r\n            size=\"medium\"\r\n            showFirstButton\r\n            showLastButton\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      {/* Column Menu */}\r\n      <Menu\r\n        anchorEl={columnMenuAnchor?.element}\r\n        open={Boolean(columnMenuAnchor)}\r\n        onClose={() => setColumnMenuAnchor(null)}\r\n      >\r\n        <MenuItem onClick={() => handleColumnMenuAction('sort-asc', columnMenuAnchor!.columnId)}>\r\n          <ArrowUpwardIcon fontSize=\"small\" sx={{ mr: 1 }} />\r\n          {t('components.smartTable.columnMenu.sortAsc')}\r\n        </MenuItem>\r\n        <MenuItem onClick={() => handleColumnMenuAction('sort-desc', columnMenuAnchor!.columnId)}>\r\n          <ArrowDownwardIcon fontSize=\"small\" sx={{ mr: 1 }} />\r\n          {t('components.smartTable.columnMenu.sortDesc')}\r\n        </MenuItem>\r\n        <Divider />\r\n        <MenuItem onClick={() => handleColumnMenuAction('hide', columnMenuAnchor!.columnId)}>\r\n          <VisibilityOffIcon fontSize=\"small\" sx={{ mr: 1 }} />\r\n          {t('components.smartTable.columnMenu.hideColumn')}\r\n        </MenuItem>\r\n      </Menu>\r\n\r\n      {/* User Select Popover */}\r\n      <Popover\r\n        open={Boolean(userSelectAnchor)}\r\n        anchorEl={userSelectAnchor?.element}\r\n        onClose={() => {\r\n          setUserSelectAnchor(null);\r\n          setUserSearchQuery('');\r\n        }}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'left',\r\n        }}\r\n      >\r\n        <Box sx={{ width: 300, maxHeight: 400 }}>\r\n          <Box sx={{ p: 2, borderBottom: `1px solid ${theme.palette.divider}` }}>\r\n            <TextField\r\n              fullWidth\r\n              size=\"small\"\r\n              placeholder={t('components.smartTable.placeholders.searchUsers')}\r\n              value={userSearchQuery}\r\n              onChange={(e) => setUserSearchQuery(e.target.value)}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                )\r\n              }}\r\n            />\r\n          </Box>\r\n          \r\n          <List sx={{ maxHeight: 300, overflow: 'auto' }}>\r\n            {filteredUsers.map(user => (\r\n              <ListItem\r\n                key={user.id}\r\n                component=\"div\"\r\n                sx={{ cursor: 'pointer' }}\r\n                onClick={() => handleUserSelect(user.id)}\r\n              >\r\n                <ListItemAvatar>\r\n                  <Avatar src={user.avatar} sx={{ width: 32, height: 32 }}>\r\n                    {user.name.charAt(0)}\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={user.name}\r\n                  secondary={user.email}\r\n                  primaryTypographyProps={{ fontWeight: 'bold' }}\r\n                />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Box>\r\n      </Popover>\r\n\r\n      {/* Edit Cell Modal */}\r\n      {editModalData && (\r\n        <EditCellModal\r\n          open={editModalOpen}\r\n          column={columns.find(col => col.id === editModalData.columnId && col.type !== 'actions')!}\r\n          value={editModalData.value}\r\n          rowData={editModalData.rowData}\r\n          users={users}\r\n          onSave={handleModalSave}\r\n          onClose={handleModalClose}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SmartTable;\r\n"],"names":["_ref","_availableFilters$fin","_availableFilters$fin2","entity","availableFilters","owners","statuses","savedViews","currency","onQueryChange","onViewChange","sticky","theme","useTheme","t","useTranslation","activeView","setActiveView","useState","appliedFilters","setAppliedFilters","ownerIds","leadStatus","openPopover","setOpenPopover","anchorEl","setAnchorEl","searchQueries","setSearchQueries","tempFilters","setTempFilters","datePresets","value","label","handleFilterClick","filterId","event","currentTarget","prev","_objectSpread","handlePopoverClose","handleOwnerSelect","ownerId","newOwnerIds","includes","filter","id","newQuery","filteredOwners","owner","name","toLowerCase","email","appliedTokens","getAppliedTokens","tokens","forEach","find","o","push","type","avatar","status","statusConfig","s","color","fieldName","dateFilter","concat","preset","amount","min","max","hasActiveFilters","length","_jsxs","Box","sx","position","top","zIndex","backgroundColor","palette","background","paper","borderBottom","divider","py","px","mb","children","display","alignItems","gap","_jsx","Typography","variant","mr","map","view","Chip","count","size","onClick","handleViewChange","viewId","cursor","alpha","primary","main","f","enabled","isActive","icon","e","deleteIcon","ArrowDownIcon","onDelete","fontSize","ml","Button","startIcon","ClearIcon","handleClearAll","emptyQuery","flexWrap","token","index","Avatar","src","width","height","handleRemoveToken","tokenType","border","error","Popover","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","maxHeight","borderRadius","boxShadow","p","TextField","fullWidth","placeholder","onChange","target","InputProps","startAdornment","InputAdornment","SearchIcon","Stack","direction","spacing","Divider","List","overflow","ListItem","ListItemText","primaryTypographyProps","dense","Checkbox","checked","ListItemAvatar","charAt","secondary","fontWeight","secondaryTypographyProps","some","handleDatePreset","newStatuses","handleStatusSelect","Number","undefined","endAdornment","justifyContent","handleAmountApply","disabled","column","initialValue","rowData","users","onSave","setValue","setError","saving","setSaving","userSearchQuery","setUserSearchQuery","useEffect","filteredUsers","user","getFieldIcon","EmailIcon","PhoneIcon","MoneyIcon","EventIcon","PersonIcon","LabelIcon","BusinessIcon","Dialog","maxWidth","DialogTitle","pb","pt","defaultValue","DialogContent","mt","renderInputField","_column$options","FormControl","InputLabel","Select","options","option","MenuItem","ListItemButton","selected","textAlign","InputLabelProps","shrink","multiline","rows","Alert","severity","DialogActions","handleCancel","async","validationError","val","required","toString","trim","validate","field","err","columns","data","loading","searchable","filterable","selectable","pagination","rowsPerPageOptions","defaultRowsPerPage","emptyMessage","onRowDoubleClick","onCellEdit","onRowSelect","onBulkAction","onPreviewContact","zebra","searchQuery","setSearchQuery","sortConfig","setSortConfig","key","selectedRows","setSelectedRows","editModalOpen","setEditModalOpen","editModalData","setEditModalData","columnMenuAnchor","setColumnMenuAnchor","hoveredCell","setHoveredCell","userSelectAnchor","setUserSelectAnchor","page","setPage","rowsPerPage","setRowsPerPage","visibleColumns","setVisibleColumns","col","frozenColumns","setFrozenColumns","filteredAndSortedData","useRef","useMemo","filtered","row","Object","values","String","sort","a","b","aValue","bValue","paginatedData","startIndex","slice","totalPages","Math","ceil","handleModalSave","rowId","columnId","console","handleModalClose","handleColumnMenuAction","action","renderCellContent","isHovered","onMouseEnter","onMouseLeave","flex","Tooltip","title","IconButton","stopPropagation","opacity","PreviewIcon","opt","u","format","EditIcon","DeleteIcon","Skeleton","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","Array","from","_","flexDirection","flexShrink","minWidth","FilterIcon","grey","backgroundClip","stickyHeader","tableLayout","padding","indeterminate","handleSelectAll","allRowIds","newSelected","sortable","userSelect","textOverflow","whiteSpace","handleSort","ArrowUpwardIcon","ArrowDownwardIcon","handleColumnMenu","element","MoreVertIcon","colSpan","hover","onDoubleClick","handleRowSelect","handleCellClick","editable","borderTop","Pagination","newPage","showFirstButton","showLastButton","Menu","Boolean","VisibilityOffIcon","userId","handleUserSelect","EditCellModal"],"sourceRoot":""}