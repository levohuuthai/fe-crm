{"version":3,"file":"static/js/694.d21ddb27.chunk.js","mappings":"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","sources":["pages/Assistant/index.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { Box, TextField, IconButton, Typography, Paper, Avatar, Button } from '@mui/material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport SmartToyIcon from '@mui/icons-material/SmartToy';\r\n\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Mock data for demo responses\r\nconst MOCK_RESPONSES: Record<string, string> = {\r\n  'Các deal chưa chốt': 'Đây là danh sách các deal chưa chốt của bạn trong tháng 7:\\n```\\n| Tên Deal | Khách hàng | Giá trị |\\n|----------|-------------|---------|\\n| Deal 1   | Công ty A   | 100M    |\\n| Deal 2   | Công ty B   | 80M     |\\n```',\r\n  'Tổng giá trị deal đã chốt': 'Tổng giá trị đã chốt của bạn trong tháng này là 377.043.143 ₫',\r\n  'Tạo nhắc việc cho Công ty B': 'Đã tạo nhắc việc cho Deal của Công ty B vào ngày mai. Bạn có muốn thêm ghi chú không?',\r\n  'Viết email cảm ơn khách hàng': 'Chào quý khách,\\n\\nCảm ơn anh/chị đã tin tưởng sử dụng dịch vụ của chúng tôi. Chúng tôi rất trân trọng sự hợp tác này...',\r\n};\r\n\r\nconst DEFAULT_SUGGESTIONS = [\r\n  'Các deal chưa chốt trong tháng này',\r\n  'Tổng giá trị deal đã chốt',\r\n  'Tạo nhắc việc cho Công ty B',\r\n  'Viết email cảm ơn khách hàng'\r\n];\r\n\r\ninterface Message {\r\n  id: number;\r\n  text: string;\r\n  isUser: boolean;\r\n  timestamp: Date;\r\n}\r\n\r\nconst AssistantPage: React.FC = () => {\r\n  const [input, setInput] = useState('');\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const navigate = useNavigate();\r\n\r\n  // Initial bot greeting\r\n  useEffect(() => {\r\n    setMessages([\r\n      {\r\n        id: 1,\r\n        text: 'Xin chào! Tôi là trợ lý ảo của CRM. Tôi có thể giúp gì cho bạn?',\r\n        isUser: false,\r\n        timestamp: new Date(),\r\n      },\r\n    ]);\r\n  }, []);\r\n\r\n  // Auto-scroll to bottom of messages\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = () => {\r\n    if (!input.trim()) return;\r\n\r\n    // Add user message\r\n    const userMessage: Message = {\r\n      id: Date.now(),\r\n      text: input,\r\n      isUser: true,\r\n      timestamp: new Date(),\r\n    };\r\n\r\n    setMessages((prev) => [...prev, userMessage]);\r\n    setInput('');\r\n\r\n    // Simulate bot response\r\n    setTimeout(() => {\r\n      const botResponse: Message = {\r\n        id: Date.now() + 1,\r\n        text: MOCK_RESPONSES[input] || 'Xin lỗi, tôi chưa hiểu yêu cầu của bạn. Bạn có thể thử lại không?',\r\n        isUser: false,\r\n        timestamp: new Date(),\r\n      };\r\n      setMessages((prev) => [...prev, botResponse]);\r\n    }, 800);\r\n  };\r\n\r\n  const handleSuggestionClick = (suggestion: string) => {\r\n    setInput(suggestion);\r\n  };\r\n\r\n  const formatDate = (date: Date) => {\r\n    return new Intl.DateTimeFormat('vi-VN', {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    }).format(date);\r\n  };\r\n\r\n  const renderMessageContent = (text: string) => {\r\n    if (text.includes('```')) {\r\n      const parts = text.split('```');\r\n      return (\r\n        <div>\r\n          {parts.map((part, index) => {\r\n            if (index % 2 === 1) {\r\n              // This is a code block\r\n              return (\r\n                <pre\r\n                  key={index}\r\n                  style={{\r\n                    backgroundColor: '#f5f5f5',\r\n                    padding: '10px',\r\n                    borderRadius: '4px',\r\n                    overflowX: 'auto',\r\n                    margin: '8px 0',\r\n                    fontFamily: 'monospace',\r\n                    whiteSpace: 'pre-wrap',\r\n                  }}\r\n                >\r\n                  {part.trim()}\r\n                </pre>\r\n              );\r\n            }\r\n            return <div key={index}>{part}</div>;\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n    return <div style={{ whiteSpace: 'pre-line' }}>{text}</div>;\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>\r\n      {/* Header */}\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'space-between',\r\n          p: 2,\r\n          borderBottom: '1px solid #e0e0e0',\r\n          backgroundColor: '#fff',\r\n        }}\r\n      >\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n          <SmartToyIcon color=\"primary\" fontSize=\"large\" />\r\n          <Typography variant=\"h6\" component=\"h1\">\r\n            Trợ lý thông minh CRM ITV\r\n          </Typography>\r\n        </Box>\r\n        <IconButton onClick={() => navigate(-1)}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </Box>\r\n\r\n      {/* Messages */}\r\n      <Box\r\n        sx={{\r\n          flex: 1,\r\n          overflowY: 'auto',\r\n          p: 2,\r\n          bgcolor: '#f9f9f9',\r\n        }}\r\n      >\r\n        {messages.map((message) => (\r\n          <Box\r\n            key={message.id}\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: message.isUser ? 'flex-end' : 'flex-start',\r\n              mb: 2,\r\n            }}\r\n          >\r\n            <Box\r\n              sx={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                maxWidth: '80%',\r\n              }}\r\n            >\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  mb: 0.5,\r\n                  justifyContent: message.isUser ? 'flex-end' : 'flex-start',\r\n                }}\r\n              >\r\n                {!message.isUser && (\r\n                  <Avatar sx={{ width: 24, height: 24, mr: 1, bgcolor: 'primary.main' }}>\r\n                    <SmartToyIcon sx={{ fontSize: 16 }} />\r\n                  </Avatar>\r\n                )}\r\n                <Typography variant=\"caption\" color=\"text.secondary\">\r\n                  {message.isUser ? 'Bạn' : 'Trợ lý AI'} • {formatDate(message.timestamp)}\r\n                </Typography>\r\n              </Box>\r\n              <Paper\r\n                elevation={0}\r\n                sx={{\r\n                  p: 2,\r\n                  bgcolor: message.isUser ? 'primary.light' : 'background.paper',\r\n                  color: message.isUser ? 'primary.contrastText' : 'text.primary',\r\n                  borderRadius: 2,\r\n                  borderTopLeftRadius: message.isUser ? 12 : 2,\r\n                  borderTopRightRadius: message.isUser ? 2 : 12,\r\n                }}\r\n              >\r\n                {renderMessageContent(message.text)}\r\n              </Paper>\r\n            </Box>\r\n          </Box>\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </Box>\r\n\r\n      {/* Suggestions */}\r\n      {messages.length <= 1 && (\r\n        <Box sx={{ p: 2, borderTop: '1px solid #e0e0e0', bgcolor: '#fff' }}>\r\n          <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\r\n            Bạn có thể hỏi:\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n            {DEFAULT_SUGGESTIONS.map((suggestion, index) => (\r\n              <Button\r\n                key={index}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                onClick={() => handleSuggestionClick(suggestion)}\r\n                sx={{\r\n                  textTransform: 'none',\r\n                  borderRadius: 4,\r\n                  fontSize: '0.8rem',\r\n                }}\r\n              >\r\n                {suggestion}\r\n              </Button>\r\n            ))}\r\n          </Box>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Input */}\r\n      <Box sx={{ p: 2, borderTop: '1px solid #e0e0e0', bgcolor: '#fff' }}>\r\n        <form\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            handleSendMessage();\r\n          }}\r\n        >\r\n          <Box sx={{ display: 'flex', gap: 1 }}>\r\n            <TextField\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              placeholder=\"Nhập tin nhắn...\"\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              onKeyPress={(e) => {\r\n                if (e.key === 'Enter' && !e.shiftKey) {\r\n                  e.preventDefault();\r\n                  handleSendMessage();\r\n                }\r\n              }}\r\n              multiline\r\n              maxRows={4}\r\n              sx={{\r\n                '& .MuiOutlinedInput-root': {\r\n                  borderRadius: 4,\r\n                  backgroundColor: '#f5f5f5',\r\n                  '&:hover fieldset': {\r\n                    borderColor: 'primary.main',\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n            <IconButton\r\n              type=\"submit\"\r\n              color=\"primary\"\r\n              sx={{\r\n                alignSelf: 'flex-end',\r\n                backgroundColor: 'primary.main',\r\n                color: 'white',\r\n                '&:hover': {\r\n                  backgroundColor: 'primary.dark',\r\n                },\r\n              }}\r\n              disabled={!input.trim()}\r\n            >\r\n              <SendIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </form>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AssistantPage;\r\n"],"names":["MOCK_RESPONSES","DEFAULT_SUGGESTIONS","AssistantPage","input","setInput","useState","messages","setMessages","messagesEndRef","useRef","navigate","useNavigate","useEffect","id","text","isUser","timestamp","Date","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","userMessage","now","prev","setTimeout","botResponse","renderMessageContent","includes","parts","split","_jsx","children","map","part","index","style","backgroundColor","padding","borderRadius","overflowX","margin","fontFamily","whiteSpace","_jsxs","Box","sx","display","flexDirection","height","alignItems","justifyContent","p","borderBottom","gap","SmartToyIcon","color","fontSize","Typography","variant","component","IconButton","onClick","CloseIcon","flex","overflowY","bgcolor","message","mb","maxWidth","Avatar","width","mr","date","Intl","DateTimeFormat","hour","minute","format","Paper","elevation","borderTopLeftRadius","borderTopRightRadius","ref","length","borderTop","gutterBottom","flexWrap","suggestion","Button","size","handleSuggestionClick","textTransform","onSubmit","e","preventDefault","TextField","fullWidth","placeholder","value","onChange","target","onKeyPress","key","shiftKey","multiline","maxRows","borderColor","type","alignSelf","disabled","SendIcon"],"sourceRoot":""}