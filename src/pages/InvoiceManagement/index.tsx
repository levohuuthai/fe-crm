import React, { useState, useEffect } from 'react';
import {
  Box, Typography, Paper, Tabs, Tab, Button, TextField, Table, TableBody,
  TableCell, TableContainer, TableHead, TableRow, IconButton, Chip, Dialog,
  DialogTitle, DialogContent, DialogActions, FormControl, InputLabel, Select,
  MenuItem, Grid, Card, CardContent, Snackbar, Alert, Tooltip, Stack, Badge,
  LinearProgress,
  InputAdornment
} from '@mui/material';
import {
  Add as AddIcon, Edit as EditIcon, Visibility as ViewIcon, Search as SearchIcon,
  Payment as PaymentIcon, Receipt as ReceiptIcon, Send as SendIcon, Print as PrintIcon,
  CheckCircle as CheckCircleIcon, Warning as WarningIcon, Schedule as ScheduleIcon
} from '@mui/icons-material';

// Types
interface InvoiceTemplate {
  id: string; name: string; code: string; description: string;
  type: 'standard' | 'vat' | 'export'; status: 'active' | 'inactive';
  usageCount: number; defaultTaxRate: number;
}

interface Invoice {
  id: string; name: string; code: string; contractName: string;
  appendixName?: string; customerName: string; issueDate: string; dueDate: string;
  totalAmount: number; paidAmount: number; remainingAmount: number;
  status: 'draft' | 'sent' | 'partial' | 'paid' | 'overdue'; type: 'standard' | 'vat' | 'export';
}

type InvoiceTab = 'templates' | 'invoices';

const InvoiceManagement: React.FC = () => {
  const [currentTab, setCurrentTab] = useState<InvoiceTab>('templates');
  const [templates, setTemplates] = useState<InvoiceTemplate[]>([]);
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);
  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' });

  // Mock data
  useEffect(() => {
    const mockTemplates: InvoiceTemplate[] = [
      {
        id: 'IT001', name: 'M·∫´u h√≥a ƒë∆°n ti√™u chu·∫©n', code: 'IT001',
        description: 'M·∫´u h√≥a ƒë∆°n cho c√°c giao d·ªãch th√¥ng th∆∞·ªùng',
        type: 'standard', status: 'active', usageCount: 25, defaultTaxRate: 10
      },
      {
        id: 'IT002', name: 'M·∫´u h√≥a ƒë∆°n VAT', code: 'IT002',
        description: 'M·∫´u h√≥a ƒë∆°n gi√° tr·ªã gia tƒÉng',
        type: 'vat', status: 'active', usageCount: 18, defaultTaxRate: 10
      }
    ];

    const mockInvoices: Invoice[] = [
      {
        id: 'INV001', name: 'H√≥a ƒë∆°n ph√°t tri·ªÉn CRM - Giai ƒëo·∫°n 1', code: 'INV001',
        contractName: 'H·ª£p ƒë·ªìng ph√°t tri·ªÉn CRM', appendixName: 'Ph·ª• l·ª•c module qu·∫£n l√Ω kh√°ch h√†ng',
        customerName: 'C√¥ng ty ABC', issueDate: '2024-02-01', dueDate: '2024-02-15',
        totalAmount: 500000000, paidAmount: 500000000, remainingAmount: 0,
        status: 'paid', type: 'vat'
      },
      {
        id: 'INV002', name: 'H√≥a ƒë∆°n ph√°t tri·ªÉn CRM - Giai ƒëo·∫°n 2', code: 'INV002',
        contractName: 'H·ª£p ƒë·ªìng ph√°t tri·ªÉn CRM', appendixName: 'Ph·ª• l·ª•c module b√°o c√°o',
        customerName: 'C√¥ng ty ABC', issueDate: '2024-02-15', dueDate: '2024-03-01',
        totalAmount: 300000000, paidAmount: 150000000, remainingAmount: 150000000,
        status: 'partial', type: 'vat'
      },
      {
        id: 'INV003', name: 'H√≥a ƒë∆°n t∆∞ v·∫•n h·ªá th·ªëng', code: 'INV003',
        contractName: 'H·ª£p ƒë·ªìng t∆∞ v·∫•n', customerName: 'C√¥ng ty XYZ',
        issueDate: '2024-01-20', dueDate: '2024-02-05', totalAmount: 100000000,
        paidAmount: 0, remainingAmount: 100000000, status: 'overdue', type: 'standard'
      }
    ];

    setTemplates(mockTemplates);
    setInvoices(mockInvoices);
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': case 'paid': return 'success';
      case 'partial': case 'sent': return 'info';
      case 'overdue': return 'error';
      default: return 'default';
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
  };

  const getPaymentProgress = (invoice: Invoice) => {
    return (invoice.paidAmount / invoice.totalAmount) * 100;
  };

  const handleCreate = () => {
    setSnackbar({ 
      open: true, 
      message: currentTab === 'templates' ? 'T·∫°o m·∫´u h√≥a ƒë∆°n th√†nh c√¥ng!' : 'T·∫°o h√≥a ƒë∆°n th√†nh c√¥ng!', 
      severity: 'success' 
    });
    setCreateDialogOpen(false);
  };

  const handlePayment = () => {
    setSnackbar({ open: true, message: 'Ghi nh·∫≠n thanh to√°n th√†nh c√¥ng!', severity: 'success' });
    setPaymentDialogOpen(false);
    setSelectedInvoice(null);
  };

  const filteredTemplates = templates.filter(template => {
    const matchesSearch = template.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || template.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const filteredInvoices = invoices.filter(invoice => {
    const matchesSearch = invoice.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         invoice.customerName.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || invoice.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  // Calculate dashboard stats
  const totalValue = invoices.reduce((sum, inv) => sum + inv.totalAmount, 0);
  const totalPaid = invoices.reduce((sum, inv) => sum + inv.paidAmount, 0);
  const overdueCount = invoices.filter(inv => inv.status === 'overdue').length;

  return (
    <Box sx={{ width: '100%', p: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom sx={{ mb: 3 }}>
        üßæ Qu·∫£n l√Ω H√≥a ƒë∆°n
      </Typography>

      {/* Dashboard Overview */}
      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3, mb: 3 }}>
        <Box sx={{ flex: '1 1 220px', maxWidth: { xs: '100%', sm: '220px' } }}>
          <Card><CardContent>
            <Typography color="textSecondary" gutterBottom>T·ªïng s·ªë h√≥a ƒë∆°n</Typography>
            <Typography variant="h4">{invoices.length}</Typography>
          </CardContent></Card>
        </Box>
        <Box sx={{ flex: '1 1 220px', maxWidth: { xs: '100%', sm: '220px' } }}>
          <Card><CardContent>
            <Typography color="textSecondary" gutterBottom>T·ªïng gi√° tr·ªã</Typography>
            <Typography variant="h6">{formatCurrency(totalValue)}</Typography>
          </CardContent></Card>
        </Box>
        <Box sx={{ flex: '1 1 220px', maxWidth: { xs: '100%', sm: '220px' } }}>
          <Card><CardContent>
            <Typography color="textSecondary" gutterBottom>ƒê√£ thanh to√°n</Typography>
            <Typography variant="h6" color="success.main">{formatCurrency(totalPaid)}</Typography>
            <Typography variant="caption">({((totalPaid/totalValue)*100).toFixed(1)}%)</Typography>
          </CardContent></Card>
        </Box>
        <Box sx={{ flex: '1 1 220px', maxWidth: { xs: '100%', sm: '220px' } }}>
          <Card><CardContent>
            <Typography color="textSecondary" gutterBottom>Qu√° h·∫°n</Typography>
            <Typography variant="h4" color="error.main">{overdueCount}</Typography>
          </CardContent></Card>
        </Box>
      </Box>

      <Paper sx={{ width: '100%' }}>
        <Tabs value={currentTab} onChange={(e, v) => setCurrentTab(v)} sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tab label={<Badge badgeContent={templates.length} color="primary">M·∫´u H√≥a ƒê∆°n</Badge>} value="templates" />
          <Tab label={<Badge badgeContent={invoices.length} color="primary">Qu·∫£n l√Ω H√≥a ƒê∆°n</Badge>} value="invoices" />
        </Tabs>

        {/* Search and Filter Bar */}
        <Box sx={{ p: 2, display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>
          <TextField
            placeholder="T√¨m ki·∫øm..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            InputProps={{ startAdornment: <SearchIcon sx={{ mr: 1, color: 'text.secondary' }} /> }}
            sx={{ minWidth: 300 }}
          />
          
          <FormControl sx={{ minWidth: 150 }}>
            <InputLabel>Tr·∫°ng th√°i</InputLabel>
            <Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)} label="Tr·∫°ng th√°i">
              <MenuItem value="all">T·∫•t c·∫£</MenuItem>
              {currentTab === 'templates' ? (
                <><MenuItem value="active">Ho·∫°t ƒë·ªông</MenuItem><MenuItem value="inactive">Ng∆∞ng</MenuItem></>
              ) : (
                <><MenuItem value="draft">B·∫£n nh√°p</MenuItem><MenuItem value="sent">ƒê√£ g·ª≠i</MenuItem>
                <MenuItem value="partial">TT m·ªôt ph·∫ßn</MenuItem><MenuItem value="paid">ƒê√£ thanh to√°n</MenuItem>
                <MenuItem value="overdue">Qu√° h·∫°n</MenuItem></>
              )}
            </Select>
          </FormControl>

          <Button variant="contained" startIcon={<AddIcon />} onClick={() => setCreateDialogOpen(true)} sx={{ ml: 'auto' }}>
            {currentTab === 'templates' ? 'T·∫°o m·∫´u m·ªõi' : 'T·∫°o h√≥a ƒë∆°n m·ªõi'}
          </Button>
        </Box>

        {/* Templates Tab */}
        {currentTab === 'templates' && (
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>M√£</TableCell>
                  <TableCell>T√™n m·∫´u</TableCell>
                  <TableCell>M√¥ t·∫£</TableCell>
                  <TableCell>Lo·∫°i</TableCell>
                  <TableCell>Thu·∫ø su·∫•t</TableCell>
                  <TableCell>S·ª≠ d·ª•ng</TableCell>
                  <TableCell>Tr·∫°ng th√°i</TableCell>
                  <TableCell>H√†nh ƒë·ªông</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredTemplates.map((template) => (
                  <TableRow key={template.id}>
                    <TableCell>{template.code}</TableCell>
                    <TableCell>{template.name}</TableCell>
                    <TableCell>{template.description}</TableCell>
                    <TableCell>
                      <Chip label={template.type === 'standard' ? 'Ti√™u chu·∫©n' : template.type === 'vat' ? 'VAT' : 'Xu·∫•t kh·∫©u'} size="small" />
                    </TableCell>
                    <TableCell>{template.defaultTaxRate}%</TableCell>
                    <TableCell>
                      <Badge badgeContent={template.usageCount} color="primary"><ReceiptIcon /></Badge>
                    </TableCell>
                    <TableCell>
                      <Chip label={template.status === 'active' ? 'Ho·∫°t ƒë·ªông' : 'Ng∆∞ng'} color={getStatusColor(template.status) as any} size="small" />
                    </TableCell>
                    <TableCell>
                      <Stack direction="row" spacing={1}>
                        <Tooltip title="Xem chi ti·∫øt"><IconButton size="small"><ViewIcon /></IconButton></Tooltip>
                        <Tooltip title="S·ª≠a"><IconButton size="small"><EditIcon /></IconButton></Tooltip>
                      </Stack>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        )}

        {/* Invoices Tab */}
        {currentTab === 'invoices' && (
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>M√£ Hƒê</TableCell>
                  <TableCell>T√™n h√≥a ƒë∆°n</TableCell>
                  <TableCell>Kh√°ch h√†ng</TableCell>
                  <TableCell>Ph·ª• l·ª•c</TableCell>
                  <TableCell>Ng√†y l·∫≠p</TableCell>
                  <TableCell>Gi√° tr·ªã</TableCell>
                  <TableCell>Ti·∫øn ƒë·ªô TT</TableCell>
                  <TableCell>Tr·∫°ng th√°i</TableCell>
                  <TableCell>H√†nh ƒë·ªông</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredInvoices.map((invoice) => (
                  <TableRow key={invoice.id}>
                    <TableCell>{invoice.code}</TableCell>
                    <TableCell>
                      <Typography variant="body2">{invoice.name}</Typography>
                      <Typography variant="caption" color="text.secondary">{invoice.contractName}</Typography>
                    </TableCell>
                    <TableCell>{invoice.customerName}</TableCell>
                    <TableCell>
                      {invoice.appendixName ? (
                        <Typography variant="body2">{invoice.appendixName}</Typography>
                      ) : (
                        <Typography variant="body2" color="text.secondary">Kh√¥ng c√≥</Typography>
                      )}
                    </TableCell>
                    <TableCell>{new Date(invoice.issueDate).toLocaleDateString('vi-VN')}</TableCell>
                    <TableCell>{formatCurrency(invoice.totalAmount)}</TableCell>
                    <TableCell>
                      <Box sx={{ width: 100 }}>
                        <LinearProgress variant="determinate" value={getPaymentProgress(invoice)} />
                        <Typography variant="caption">
                          {((invoice.paidAmount/invoice.totalAmount)*100).toFixed(0)}%
                        </Typography>
                      </Box>
                    </TableCell>
                    <TableCell>
                      <Chip 
                        label={
                          invoice.status === 'draft' ? 'B·∫£n nh√°p' :
                          invoice.status === 'sent' ? 'ƒê√£ g·ª≠i' :
                          invoice.status === 'partial' ? 'TT m·ªôt ph·∫ßn' :
                          invoice.status === 'paid' ? 'ƒê√£ thanh to√°n' : 'Qu√° h·∫°n'
                        }
                        color={getStatusColor(invoice.status) as any}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      <Stack direction="row" spacing={1}>
                        <Tooltip title="Xem chi ti·∫øt"><IconButton size="small"><ViewIcon /></IconButton></Tooltip>
                        <Tooltip title="In h√≥a ƒë∆°n"><IconButton size="small"><PrintIcon /></IconButton></Tooltip>
                        {(invoice.status === 'sent' || invoice.status === 'partial' || invoice.status === 'overdue') && (
                          <Tooltip title="Ghi nh·∫≠n thanh to√°n">
                            <IconButton size="small" color="success" onClick={() => { setSelectedInvoice(invoice); setPaymentDialogOpen(true); }}>
                              <PaymentIcon />
                            </IconButton>
                          </Tooltip>
                        )}
                        <Tooltip title="G·ª≠i email"><IconButton size="small"><SendIcon /></IconButton></Tooltip>
                      </Stack>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        )}
      </Paper>

      {/* Create Dialog */}
      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth="md" fullWidth>
        <DialogTitle>{currentTab === 'templates' ? 'T·∫°o m·∫´u h√≥a ƒë∆°n m·ªõi' : 'T·∫°o h√≥a ƒë∆°n m·ªõi'}</DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mt: 1 }}>
            <Box sx={{ flex: '1 1 45%', minWidth: '250px' }}>
              <TextField fullWidth label={currentTab === 'templates' ? 'T√™n m·∫´u h√≥a ƒë∆°n' : 'T√™n h√≥a ƒë∆°n'} />
            </Box>
            <Box sx={{ flex: '1 1 45%', minWidth: '250px' }}>
              <TextField fullWidth label="M√£" />
            </Box>
            <Box sx={{ flex: '1 1 100%' }}>
              <TextField fullWidth label="M√¥ t·∫£" multiline rows={3} />
            </Box>
            {currentTab === 'templates' ? (
              <Box sx={{ flex: '1 1 45%', minWidth: '250px' }}>
                <TextField 
                  fullWidth 
                  label="Thu·∫ø su·∫•t (%)"
                  type="number"
                  defaultValue="10"
                  InputProps={{
                    endAdornment: <InputAdornment position="end">%</InputAdornment>,
                  }}
                />
              </Box>
            ) : (
              <>
                <Box sx={{ flex: '1 1 45%', minWidth: '250px' }}>
                  <FormControl fullWidth>
                    <InputLabel>M·∫´u h√≥a ƒë∆°n</InputLabel>
                    <Select label="M·∫´u h√≥a ƒë∆°n">
                      <MenuItem value="INV-TEMP-001">M·∫´u h√≥a ƒë∆°n chu·∫©n</MenuItem>
                      <MenuItem value="INV-TEMP-002">M·∫´u h√≥a ƒë∆°n ƒë∆°n gi·∫£n</MenuItem>
                    </Select>
                  </FormControl>
                </Box>
                <Box sx={{ flex: '1 1 45%', minWidth: '250px' }}>
                  <FormControl fullWidth>
                    <InputLabel>Bi√™n b·∫£n nghi·ªám thu</InputLabel>
                    <Select label="Bi√™n b·∫£n nghi·ªám thu">
                      <MenuItem value="ACC-001">Nghi·ªám thu module CRM - Giai ƒëo·∫°n 1</MenuItem>
                      <MenuItem value="ACC-002">Nghi·ªám thu module b√°o c√°o</MenuItem>
                    </Select>
                  </FormControl>
                </Box>
                <Box sx={{ flex: '1 1 100%' }}>
                  <TextField 
                    fullWidth 
                    label="Gi√° tr·ªã"
                    type="number"
                    defaultValue="10000000"
                    InputProps={{
                      startAdornment: <InputAdornment position="start">VND</InputAdornment>,
                    }}
                  />
                </Box>
                <Box sx={{ flex: '1 1 45%', minWidth: '250px' }}>
                  <TextField
                    fullWidth
                    label="Ng√†y ph√°t h√†nh"
                    type="date"
                    defaultValue={new Date().toISOString().split('T')[0]}
                    InputLabelProps={{ shrink: true }}
                  />
                </Box>
                <Box sx={{ flex: '1 1 45%', minWidth: '250px' }}>
                  <TextField
                    fullWidth
                    label="Ng√†y ƒë·∫øn h·∫°n"
                    type="date"
                    defaultValue={new Date(Date.now() + 30*24*60*60*1000).toISOString().split('T')[0]}
                    InputLabelProps={{ shrink: true }}
                  />
                </Box>
              </>
            )}
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setCreateDialogOpen(false)}>H·ªßy</Button>
          {currentTab === 'invoices' && <Button variant="outlined">L∆∞u nh√°p</Button>}
          <Button variant="contained" onClick={handleCreate}>L∆∞u</Button>
        </DialogActions>
      </Dialog>

      {/* Payment Dialog */}
      <Dialog open={paymentDialogOpen} onClose={() => setPaymentDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Ghi nh·∫≠n thanh to√°n</DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mt: 1 }}>
            <Box sx={{ flex: '1 1 45%', minWidth: '250px' }}>
              <TextField
                fullWidth
                label="Ng√†y thanh to√°n"
                type="date"
                defaultValue={new Date().toISOString().split('T')[0]}
                InputLabelProps={{ shrink: true }}
              />
            </Box>
            <Box sx={{ flex: '1 1 45%', minWidth: '250px' }}>
              <TextField 
                fullWidth 
                label="S·ªë ti·ªÅn"
                type="number"
                defaultValue="5000000"
                InputProps={{
                  startAdornment: <InputAdornment position="start">VND</InputAdornment>,
                }}
              />
            </Box>
            <Box sx={{ flex: '1 1 100%' }}>
              <FormControl fullWidth>
                <InputLabel>Ph∆∞∆°ng th·ª©c thanh to√°n</InputLabel>
                <Select label="Ph∆∞∆°ng th·ª©c thanh to√°n" defaultValue="bank">
                  <MenuItem value="bank">Chuy·ªÉn kho·∫£n ng√¢n h√†ng</MenuItem>
                  <MenuItem value="cash">Ti·ªÅn m·∫∑t</MenuItem>
                  <MenuItem value="card">Th·∫ª t√≠n d·ª•ng</MenuItem>
                </Select>
              </FormControl>
            </Box>
            <Box sx={{ flex: '1 1 100%' }}>
              <TextField fullWidth label="Ghi ch√∫" multiline rows={2} />
            </Box>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setPaymentDialogOpen(false)}>H·ªßy</Button>
          <Button variant="contained" onClick={handlePayment}>Ghi nh·∫≠n</Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar */}
      <Snackbar open={snackbar.open} autoHideDuration={6000} onClose={() => setSnackbar({...snackbar, open: false})}>
        <Alert severity={snackbar.severity}>{snackbar.message}</Alert>
      </Snackbar>
    </Box>
  );
};

export default InvoiceManagement;
