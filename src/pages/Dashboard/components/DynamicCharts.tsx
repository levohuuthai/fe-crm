import React, { useState } from 'react';
import { 
  Box, 
  Paper, 
  Typography, 
  ToggleButtonGroup, 
  ToggleButton,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  SelectChangeEvent
} from '@mui/material';
import {
  BarChart as BarChartIcon,
  PieChart as PieChartIcon,
  ShowChart as LineChartIcon,
  TableChart as TableChartIcon
} from '@mui/icons-material';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line
} from 'recharts';

// D·ªØ li·ªáu m·∫´u cho bi·ªÉu ƒë·ªì doanh thu theo nh√¢n vi√™n
const REVENUE_DATA = [
  { name: 'Nguy·ªÖn VƒÉn A', value: 1200 },
  { name: 'Tr·∫ßn Th·ªã B', value: 950 },
  { name: 'L√™ VƒÉn C', value: 850 },
  { name: 'Ph·∫°m Th·ªã D', value: 700 },
  { name: 'Ho√†ng VƒÉn E', value: 500 },
];

// D·ªØ li·ªáu m·∫´u cho bi·ªÉu ƒë·ªì tr·∫°ng th√°i deal
const DEAL_STATUS_DATA = [
  { name: 'Lead', value: 45, color: '#f87171' },
  { name: 'B√°o gi√°', value: 32, color: '#fbbf24' },
  { name: 'ƒê√†m ph√°n', value: 18, color: '#60a5fa' },
  { name: 'Win', value: 38, color: '#34d399' },
  { name: 'Lose', value: 23, color: '#9ca3af' },
];

// D·ªØ li·ªáu m·∫´u cho kh√°ch h√†ng m·ªõi
const NEW_CUSTOMERS_DATA = [
  { name: 'H√¥m nay', value: 12 },
  { name: 'H√¥m qua', value: 10 },
  { name: '2 ng√†y tr∆∞·ªõc', value: 8 },
  { name: '3 ng√†y tr∆∞·ªõc', value: 15 },
  { name: '4 ng√†y tr∆∞·ªõc', value: 7 },
];

// D·ªØ li·ªáu m·∫´u cho doanh thu theo th√°ng
const REVENUE_BY_MONTH_DATA = [
  { name: 'T1', value: 800 },
  { name: 'T2', value: 950 },
  { name: 'T3', value: 1100 },
  { name: 'T4', value: 1250 },
  { name: 'T5', value: 1400 },
  { name: 'T6', value: 1600 },
];

// D·ªØ li·ªáu m·∫´u cho t·ªâ l·ªá chuy·ªÉn ƒë·ªïi
const CONVERSION_RATE_DATA = [
  { name: 'Chuy·ªÉn ƒë·ªïi', value: 65, color: '#34d399' },
  { name: 'Kh√¥ng chuy·ªÉn ƒë·ªïi', value: 35, color: '#f87171' },
];

// D·ªØ li·ªáu m·∫´u cho bi·ªÉu ƒë·ªì doanh thu theo th√°ng
const MONTHLY_REVENUE_DATA = [
  { name: 'T1', value: 1200 },
  { name: 'T2', value: 1900 },
  { name: 'T3', value: 1500 },
  { name: 'T4', value: 2200 },
  { name: 'T5', value: 1800 },
  { name: 'T6', value: 2400 },
  { name: 'T7', value: 2100 },
];

// M√†u s·∫Øc cho bi·ªÉu ƒë·ªì
const COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ef4444'];

// Lo·∫°i bi·ªÉu ƒë·ªì
type ChartType = 'bar' | 'pie' | 'line' | 'table';

// Lo·∫°i th·ªùi gian
type TimeRange = 'today' | 'week' | 'month' | 'quarter' | 'year';

interface DynamicChartsProps {
  query: string;
}

const DynamicCharts: React.FC<DynamicChartsProps> = ({ query }) => {
  const [chartType, setChartType] = useState<ChartType>('bar');
  const [timeRange, setTimeRange] = useState<TimeRange>('month');

  const handleChartTypeChange = (
    event: React.MouseEvent<HTMLElement>,
    newChartType: ChartType | null,
  ) => {
    if (newChartType !== null) {
      setChartType(newChartType);
    }
  };

  const handleTimeRangeChange = (event: SelectChangeEvent) => {
    setTimeRange(event.target.value as TimeRange);
  };

  // X√°c ƒë·ªãnh lo·∫°i bi·ªÉu ƒë·ªì v√† d·ªØ li·ªáu d·ª±a tr√™n query
  const getChartTypeFromQuery = (query: string): { type: string; chartType: ChartType } => {
    const lowercaseQuery = query.toLowerCase();
    
    // Kh√°ch h√†ng m·ªõi
    if (lowercaseQuery.includes('kh√°ch h√†ng m·ªõi') || 
        (lowercaseQuery.includes('kh√°ch h√†ng') && lowercaseQuery.includes('m·ªõi'))) {
      return { type: 'newCustomers', chartType: 'bar' };
    }
    
    // Doanh thu theo nh√¢n vi√™n
    else if (lowercaseQuery.includes('doanh thu') && lowercaseQuery.includes('nh√¢n vi√™n')) {
      return { type: 'revenueByEmployee', chartType: 'bar' };
    }
    
    // Tr·∫°ng th√°i deal
    else if ((lowercaseQuery.includes('deal') || lowercaseQuery.includes('giao d·ªãch')) && 
             (lowercaseQuery.includes('tr·∫°ng th√°i') || lowercaseQuery.includes('giai ƒëo·∫°n'))) {
      return { type: 'dealStatus', chartType: 'pie' };
    }
    
    // Doanh thu theo th√°ng
    else if (lowercaseQuery.includes('doanh thu') && 
             (lowercaseQuery.includes('th√°ng') || lowercaseQuery.includes('th·ªùi gian'))) {
      return { type: 'revenueByMonth', chartType: 'line' };
    }
    
    // T·ªâ l·ªá chuy·ªÉn ƒë·ªïi
    else if (lowercaseQuery.includes('t·ªâ l·ªá') || lowercaseQuery.includes('chuy·ªÉn ƒë·ªïi')) {
      return { type: 'conversionRate', chartType: 'pie' };
    }
    
    // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã bi·ªÉu ƒë·ªì doanh thu theo nh√¢n vi√™n
    return { type: 'revenueByEmployee', chartType: 'bar' };
  };

  const { type: chartDataType } = getChartTypeFromQuery(query || '');
  
  // T·ª± ƒë·ªông c·∫≠p nh·∫≠t lo·∫°i bi·ªÉu ƒë·ªì d·ª±a tr√™n c√¢u h·ªèi n·∫øu c√≥ query m·ªõi
  React.useEffect(() => {
    if (query) {
      const { chartType: newChartType } = getChartTypeFromQuery(query);
      setChartType(newChartType);
    }
  }, [query]);
  
  // L·∫•y d·ªØ li·ªáu ph√π h·ª£p v·ªõi lo·∫°i bi·ªÉu ƒë·ªì
  const getChartData = () => {
    switch (chartDataType) {
      case 'newCustomers':
        return NEW_CUSTOMERS_DATA;
      case 'dealStatus':
        return DEAL_STATUS_DATA;
      case 'revenueByMonth':
        return REVENUE_BY_MONTH_DATA;
      case 'conversionRate':
        return CONVERSION_RATE_DATA;
      case 'revenueByEmployee':
      default:
        return REVENUE_DATA;
    }
  };
  
  const chartData = getChartData();

  // Format gi√° tr·ªã ti·ªÅn t·ªá
  const formatValue = (value: number) => {
    return `${value} tri·ªáu`;
  };

  return (
    <Paper elevation={2} sx={{ p: 3, borderRadius: 2, mb: 4 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
          üìà {query ? `K·∫øt qu·∫£ cho: "${query}"` : 'Ph√¢n t√≠ch d·ªØ li·ªáu kinh doanh'}
        </Typography>
        
        <Box sx={{ display: 'flex', gap: 2 }}>
          <ToggleButtonGroup
            size="small"
            value={chartType}
            exclusive
            onChange={handleChartTypeChange}
            aria-label="chart type"
          >
            <ToggleButton value="bar" aria-label="bar chart">
              <BarChartIcon fontSize="small" />
            </ToggleButton>
            <ToggleButton value="pie" aria-label="pie chart">
              <PieChartIcon fontSize="small" />
            </ToggleButton>
            <ToggleButton value="line" aria-label="line chart">
              <LineChartIcon fontSize="small" />
            </ToggleButton>
            <ToggleButton value="table" aria-label="table">
              <TableChartIcon fontSize="small" />
            </ToggleButton>
          </ToggleButtonGroup>
          
          <FormControl size="small" sx={{ minWidth: 120 }}>
            <InputLabel id="time-range-label">Th·ªùi gian</InputLabel>
            <Select
              labelId="time-range-label"
              id="time-range"
              value={timeRange}
              label="Th·ªùi gian"
              onChange={handleTimeRangeChange}
            >
              <MenuItem value="today">H√¥m nay</MenuItem>
              <MenuItem value="week">Tu·∫ßn n√†y</MenuItem>
              <MenuItem value="month">Th√°ng n√†y</MenuItem>
              <MenuItem value="quarter">Qu√Ω n√†y</MenuItem>
              <MenuItem value="year">NƒÉm nay</MenuItem>
            </Select>
          </FormControl>
        </Box>
      </Box>

      <Box sx={{ height: 400, width: '100%' }}>
        {chartType === 'bar' && (
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={chartDataType === 'revenueByMonth' ? MONTHLY_REVENUE_DATA : REVENUE_DATA}
              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip formatter={(value) => formatValue(value as number)} />
              <Legend />
              <Bar 
                dataKey="value" 
                name={chartDataType === 'revenueByMonth' ? 'Doanh thu theo th√°ng' : 'Doanh thu theo nh√¢n vi√™n'} 
                fill="#3b82f6" 
              />
            </BarChart>
          </ResponsiveContainer>
        )}

        {chartType === 'pie' && (
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={chartDataType === 'dealStatus' ? DEAL_STATUS_DATA : REVENUE_DATA}
                cx="50%"
                cy="50%"
                labelLine={false}
                outerRadius={150}
                fill="#8884d8"
                dataKey="value"
                nameKey="name"
                label={({ name, percent }) => `${name}: ${percent ? (percent * 100).toFixed(0) : 0}%`}
              >
                {chartData.map((entry, index) => (
                  <Cell 
                    key={`cell-${index}`} 
                    fill={(entry as any).color || COLORS[index % COLORS.length]} 
                  />
                ))}
              </Pie>
              <Tooltip formatter={(value) => formatValue(value as number)} />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        )}

        {chartType === 'line' && (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart
              data={MONTHLY_REVENUE_DATA}
              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip formatter={(value) => formatValue(value as number)} />
              <Legend />
              <Line 
                type="monotone" 
                dataKey="value" 
                name="Doanh thu theo th√°ng" 
                stroke="#3b82f6" 
                activeDot={{ r: 8 }} 
              />
            </LineChart>
          </ResponsiveContainer>
        )}

        {chartType === 'table' && (
          <Box sx={{ height: '100%', overflow: 'auto' }}>
            <table style={{ width: '100%', borderCollapse: 'collapse' }}>
              <thead>
                <tr style={{ borderBottom: '2px solid #e2e8f0' }}>
                  <th style={{ padding: '12px 16px', textAlign: 'left' }}>T√™n</th>
                  <th style={{ padding: '12px 16px', textAlign: 'right' }}>Gi√° tr·ªã</th>
                </tr>
              </thead>
              <tbody>
                {(chartDataType === 'dealStatus' ? DEAL_STATUS_DATA : 
                  chartDataType === 'revenueByMonth' ? MONTHLY_REVENUE_DATA : REVENUE_DATA)
                  .map((item, index) => (
                    <tr 
                      key={index} 
                      style={{ 
                        borderBottom: '1px solid #e2e8f0',
                        backgroundColor: index % 2 === 0 ? '#f8fafc' : 'white'
                      }}
                    >
                      <td style={{ padding: '12px 16px' }}>{item.name}</td>
                      <td style={{ padding: '12px 16px', textAlign: 'right' }}>
                        {formatValue(item.value)}
                      </td>
                    </tr>
                  ))}
              </tbody>
            </table>
          </Box>
        )}
      </Box>
    </Paper>
  );
};

export default DynamicCharts;